package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set UserQuerySet

// UserQuerySet is an queryset type for User
type UserQuerySet struct {
	db *gorm.DB
}

// NewUserQuerySet constructs new UserQuerySet
func NewUserQuerySet(db *gorm.DB) UserQuerySet {
	return UserQuerySet{
		db: db.Model(&User{}),
	}
}

func (qs UserQuerySet) w(db *gorm.DB) UserQuerySet {
	return NewUserQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) All(ret *[]User) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *User) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtEq(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtGte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLt(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtLte(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) CreatedAtNe(createdAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Delete() error {
	return qs.db.Delete(User{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *User) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DescriptionEq(description string) UserQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DescriptionIn(description string, descriptionRest ...string) UserQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DescriptionNe(description string) UserQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) DescriptionNotIn(description string, descriptionRest ...string) UserQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// EmailEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailEq(email string) UserQuerySet {
	return qs.w(qs.db.Where("email = ?", email))
}

// EmailIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailIn(email string, emailRest ...string) UserQuerySet {
	iArgs := []interface{}{email}
	for _, arg := range emailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("email IN (?)", iArgs))
}

// EmailNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNe(email string) UserQuerySet {
	return qs.w(qs.db.Where("email != ?", email))
}

// EmailNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EmailNotIn(email string, emailRest ...string) UserQuerySet {
	iArgs := []interface{}{email}
	for _, arg := range emailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("email NOT IN (?)", iArgs))
}

// EncryptedPasswordEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EncryptedPasswordEq(encryptedPassword string) UserQuerySet {
	return qs.w(qs.db.Where("encrypted_password = ?", encryptedPassword))
}

// EncryptedPasswordIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EncryptedPasswordIn(encryptedPassword string, encryptedPasswordRest ...string) UserQuerySet {
	iArgs := []interface{}{encryptedPassword}
	for _, arg := range encryptedPasswordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("encrypted_password IN (?)", iArgs))
}

// EncryptedPasswordNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EncryptedPasswordNe(encryptedPassword string) UserQuerySet {
	return qs.w(qs.db.Where("encrypted_password != ?", encryptedPassword))
}

// EncryptedPasswordNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) EncryptedPasswordNotIn(encryptedPassword string, encryptedPasswordRest ...string) UserQuerySet {
	iArgs := []interface{}{encryptedPassword}
	for _, arg := range encryptedPasswordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("encrypted_password NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) GetUpdater() UserUpdater {
	return NewUserUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDEq(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDGte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDIn(ID uint, IDRest ...uint) UserQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLt(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDLte(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNe(ID uint) UserQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) IDNotIn(ID uint, IDRest ...uint) UserQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) Limit(limit int) UserQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MobileEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) MobileEq(mobile string) UserQuerySet {
	return qs.w(qs.db.Where("mobile = ?", mobile))
}

// MobileIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) MobileIn(mobile string, mobileRest ...string) UserQuerySet {
	iArgs := []interface{}{mobile}
	for _, arg := range mobileRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("mobile IN (?)", iArgs))
}

// MobileNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) MobileNe(mobile string) UserQuerySet {
	return qs.w(qs.db.Where("mobile != ?", mobile))
}

// MobileNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) MobileNotIn(mobile string, mobileRest ...string) UserQuerySet {
	iArgs := []interface{}{mobile}
	for _, arg := range mobileRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("mobile NOT IN (?)", iArgs))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameEq(name string) UserQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameIn(name string, nameRest ...string) UserQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNe(name string) UserQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) NameNotIn(name string, nameRest ...string) UserQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs UserQuerySet) One(ret *User) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByID() UserQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderAscByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByCreatedAt() UserQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByID() UserQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) OrderDescByUpdatedAt() UserQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PasswordEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordEq(password string) UserQuerySet {
	return qs.w(qs.db.Where("password = ?", password))
}

// PasswordIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordIn(password string, passwordRest ...string) UserQuerySet {
	iArgs := []interface{}{password}
	for _, arg := range passwordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("password IN (?)", iArgs))
}

// PasswordNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordNe(password string) UserQuerySet {
	return qs.w(qs.db.Where("password != ?", password))
}

// PasswordNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PasswordNotIn(password string, passwordRest ...string) UserQuerySet {
	iArgs := []interface{}{password}
	for _, arg := range passwordRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("password NOT IN (?)", iArgs))
}

// PosibleSendEmailEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendEmailEq(posibleSendEmail bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_email = ?", posibleSendEmail))
}

// PosibleSendEmailIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendEmailIn(posibleSendEmail bool, posibleSendEmailRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendEmail}
	for _, arg := range posibleSendEmailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_email IN (?)", iArgs))
}

// PosibleSendEmailNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendEmailNe(posibleSendEmail bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_email != ?", posibleSendEmail))
}

// PosibleSendEmailNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendEmailNotIn(posibleSendEmail bool, posibleSendEmailRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendEmail}
	for _, arg := range posibleSendEmailRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_email NOT IN (?)", iArgs))
}

// PosibleSendSMSEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendSMSEq(posibleSendSMS bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_sms = ?", posibleSendSMS))
}

// PosibleSendSMSIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendSMSIn(posibleSendSMS bool, posibleSendSMSRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendSMS}
	for _, arg := range posibleSendSMSRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_sms IN (?)", iArgs))
}

// PosibleSendSMSNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendSMSNe(posibleSendSMS bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_sms != ?", posibleSendSMS))
}

// PosibleSendSMSNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendSMSNotIn(posibleSendSMS bool, posibleSendSMSRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendSMS}
	for _, arg := range posibleSendSMSRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_sms NOT IN (?)", iArgs))
}

// PosibleSendWebEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebEq(posibleSendWeb bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_web = ?", posibleSendWeb))
}

// PosibleSendWebIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebIn(posibleSendWeb bool, posibleSendWebRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendWeb}
	for _, arg := range posibleSendWebRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_web IN (?)", iArgs))
}

// PosibleSendWebNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebNe(posibleSendWeb bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_web != ?", posibleSendWeb))
}

// PosibleSendWebNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebNotIn(posibleSendWeb bool, posibleSendWebRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendWeb}
	for _, arg := range posibleSendWebRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_web NOT IN (?)", iArgs))
}

// PosibleSendWebhookEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebhookEq(posibleSendWebhook bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_webhook = ?", posibleSendWebhook))
}

// PosibleSendWebhookIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebhookIn(posibleSendWebhook bool, posibleSendWebhookRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendWebhook}
	for _, arg := range posibleSendWebhookRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_webhook IN (?)", iArgs))
}

// PosibleSendWebhookNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebhookNe(posibleSendWebhook bool) UserQuerySet {
	return qs.w(qs.db.Where("posible_send_webhook != ?", posibleSendWebhook))
}

// PosibleSendWebhookNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) PosibleSendWebhookNotIn(posibleSendWebhook bool, posibleSendWebhookRest ...bool) UserQuerySet {
	iArgs := []interface{}{posibleSendWebhook}
	for _, arg := range posibleSendWebhookRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("posible_send_webhook NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetCreatedAt(createdAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetDescription(description string) UserUpdater {
	u.fields[string(UserDBSchema.Description)] = description
	return u
}

// SetEmail is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEmail(email string) UserUpdater {
	u.fields[string(UserDBSchema.Email)] = email
	return u
}

// SetEncryptedPassword is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetEncryptedPassword(encryptedPassword string) UserUpdater {
	u.fields[string(UserDBSchema.EncryptedPassword)] = encryptedPassword
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetID(ID uint) UserUpdater {
	u.fields[string(UserDBSchema.ID)] = ID
	return u
}

// SetMobile is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetMobile(mobile string) UserUpdater {
	u.fields[string(UserDBSchema.Mobile)] = mobile
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetName(name string) UserUpdater {
	u.fields[string(UserDBSchema.Name)] = name
	return u
}

// SetPassword is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPassword(password string) UserUpdater {
	u.fields[string(UserDBSchema.Password)] = password
	return u
}

// SetPosibleSendEmail is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPosibleSendEmail(posibleSendEmail bool) UserUpdater {
	u.fields[string(UserDBSchema.PosibleSendEmail)] = posibleSendEmail
	return u
}

// SetPosibleSendSMS is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPosibleSendSMS(posibleSendSMS bool) UserUpdater {
	u.fields[string(UserDBSchema.PosibleSendSMS)] = posibleSendSMS
	return u
}

// SetPosibleSendWeb is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPosibleSendWeb(posibleSendWeb bool) UserUpdater {
	u.fields[string(UserDBSchema.PosibleSendWeb)] = posibleSendWeb
	return u
}

// SetPosibleSendWebhook is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetPosibleSendWebhook(posibleSendWebhook bool) UserUpdater {
	u.fields[string(UserDBSchema.PosibleSendWebhook)] = posibleSendWebhook
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetUpdatedAt(updatedAt time.Time) UserUpdater {
	u.fields[string(UserDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUsername is an autogenerated method
// nolint: dupl
func (u UserUpdater) SetUsername(username string) UserUpdater {
	u.fields[string(UserDBSchema.Username)] = username
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u UserUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u UserUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtEq(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtGte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLt(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtLte(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UpdatedAtNe(updatedAt time.Time) UserQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UsernameEq is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UsernameEq(username string) UserQuerySet {
	return qs.w(qs.db.Where("username = ?", username))
}

// UsernameIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UsernameIn(username string, usernameRest ...string) UserQuerySet {
	iArgs := []interface{}{username}
	for _, arg := range usernameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("username IN (?)", iArgs))
}

// UsernameNe is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UsernameNe(username string) UserQuerySet {
	return qs.w(qs.db.Where("username != ?", username))
}

// UsernameNotIn is an autogenerated method
// nolint: dupl
func (qs UserQuerySet) UsernameNotIn(username string, usernameRest ...string) UserQuerySet {
	iArgs := []interface{}{username}
	for _, arg := range usernameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("username NOT IN (?)", iArgs))
}

// ===== END of query set UserQuerySet

// ===== BEGIN of User modifiers

type userDBSchemaField string

func (f userDBSchemaField) String() string {
	return string(f)
}

// UserDBSchema stores db field names of User
var UserDBSchema = struct {
	ID                 userDBSchemaField
	CreatedAt          userDBSchemaField
	UpdatedAt          userDBSchemaField
	Name               userDBSchemaField
	Description        userDBSchemaField
	Username           userDBSchemaField
	Password           userDBSchemaField
	EncryptedPassword  userDBSchemaField
	Email              userDBSchemaField
	Mobile             userDBSchemaField
	PosibleSendSMS     userDBSchemaField
	PosibleSendEmail   userDBSchemaField
	PosibleSendWeb     userDBSchemaField
	PosibleSendWebhook userDBSchemaField
}{

	ID:                 userDBSchemaField("id"),
	CreatedAt:          userDBSchemaField("created_at"),
	UpdatedAt:          userDBSchemaField("updated_at"),
	Name:               userDBSchemaField("name"),
	Description:        userDBSchemaField("description"),
	Username:           userDBSchemaField("username"),
	Password:           userDBSchemaField("password"),
	EncryptedPassword:  userDBSchemaField("encrypted_password"),
	Email:              userDBSchemaField("email"),
	Mobile:             userDBSchemaField("mobile"),
	PosibleSendSMS:     userDBSchemaField("posible_send_sms"),
	PosibleSendEmail:   userDBSchemaField("posible_send_email"),
	PosibleSendWeb:     userDBSchemaField("posible_send_web"),
	PosibleSendWebhook: userDBSchemaField("posible_send_webhook"),
}

// Update updates User fields by primary key
func (o *User) Update(db *gorm.DB, fields ...userDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                   o.ID,
		"created_at":           o.CreatedAt,
		"updated_at":           o.UpdatedAt,
		"name":                 o.Name,
		"description":          o.Description,
		"username":             o.Username,
		"password":             o.Password,
		"encrypted_password":   o.EncryptedPassword,
		"email":                o.Email,
		"mobile":               o.Mobile,
		"posible_send_sms":     o.PosibleSendSMS,
		"posible_send_email":   o.PosibleSendEmail,
		"posible_send_web":     o.PosibleSendWeb,
		"posible_send_webhook": o.PosibleSendWebhook,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update User %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// UserUpdater is an User updates manager
type UserUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewUserUpdater creates new User updater
func NewUserUpdater(db *gorm.DB) UserUpdater {
	return UserUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&User{}),
	}
}

// ===== END of User modifiers

// ===== END of all query sets
