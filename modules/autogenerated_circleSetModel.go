package modules

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set CircleSetQuerySet

// CircleSetQuerySet is an queryset type for CircleSet
type CircleSetQuerySet struct {
	db *gorm.DB
}

// NewCircleSetQuerySet constructs new CircleSetQuerySet
func NewCircleSetQuerySet(db *gorm.DB) CircleSetQuerySet {
	return CircleSetQuerySet{
		db: db.Model(&CircleSet{}),
	}
}

func (qs CircleSetQuerySet) w(db *gorm.DB) CircleSetQuerySet {
	return NewCircleSetQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) All(ret *[]CircleSet) error {
	return qs.db.Find(ret).Error
}

// AppContactEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppContactEq(appContact string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_contact = ?", appContact))
}

// AppContactIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppContactIn(appContact string, appContactRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appContact}
	for _, arg := range appContactRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_contact IN (?)", iArgs))
}

// AppContactNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppContactNe(appContact string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_contact != ?", appContact))
}

// AppContactNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppContactNotIn(appContact string, appContactRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appContact}
	for _, arg := range appContactRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_contact NOT IN (?)", iArgs))
}

// AppDescriptionEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppDescriptionEq(appDescription string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_description = ?", appDescription))
}

// AppDescriptionIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppDescriptionIn(appDescription string, appDescriptionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appDescription}
	for _, arg := range appDescriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_description IN (?)", iArgs))
}

// AppDescriptionNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppDescriptionNe(appDescription string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_description != ?", appDescription))
}

// AppDescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppDescriptionNotIn(appDescription string, appDescriptionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appDescription}
	for _, arg := range appDescriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_description NOT IN (?)", iArgs))
}

// AppLicenseEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppLicenseEq(appLicense string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_license = ?", appLicense))
}

// AppLicenseIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppLicenseIn(appLicense string, appLicenseRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appLicense}
	for _, arg := range appLicenseRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_license IN (?)", iArgs))
}

// AppLicenseNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppLicenseNe(appLicense string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_license != ?", appLicense))
}

// AppLicenseNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppLicenseNotIn(appLicense string, appLicenseRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appLicense}
	for _, arg := range appLicenseRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_license NOT IN (?)", iArgs))
}

// AppSecurityDefinitionEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppSecurityDefinitionEq(appSecurityDefinition string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_security_definition = ?", appSecurityDefinition))
}

// AppSecurityDefinitionIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppSecurityDefinitionIn(appSecurityDefinition string, appSecurityDefinitionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appSecurityDefinition}
	for _, arg := range appSecurityDefinitionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_security_definition IN (?)", iArgs))
}

// AppSecurityDefinitionNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppSecurityDefinitionNe(appSecurityDefinition string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_security_definition != ?", appSecurityDefinition))
}

// AppSecurityDefinitionNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppSecurityDefinitionNotIn(appSecurityDefinition string, appSecurityDefinitionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appSecurityDefinition}
	for _, arg := range appSecurityDefinitionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_security_definition NOT IN (?)", iArgs))
}

// AppTermsOfServiceUrlEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTermsOfServiceUrlEq(appTermsOfServiceUrl string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_terms_of_service_url = ?", appTermsOfServiceUrl))
}

// AppTermsOfServiceUrlIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTermsOfServiceUrlIn(appTermsOfServiceUrl string, appTermsOfServiceUrlRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appTermsOfServiceUrl}
	for _, arg := range appTermsOfServiceUrlRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_terms_of_service_url IN (?)", iArgs))
}

// AppTermsOfServiceUrlNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTermsOfServiceUrlNe(appTermsOfServiceUrl string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_terms_of_service_url != ?", appTermsOfServiceUrl))
}

// AppTermsOfServiceUrlNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTermsOfServiceUrlNotIn(appTermsOfServiceUrl string, appTermsOfServiceUrlRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appTermsOfServiceUrl}
	for _, arg := range appTermsOfServiceUrlRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_terms_of_service_url NOT IN (?)", iArgs))
}

// AppTitleEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTitleEq(appTitle string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_title = ?", appTitle))
}

// AppTitleIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTitleIn(appTitle string, appTitleRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appTitle}
	for _, arg := range appTitleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_title IN (?)", iArgs))
}

// AppTitleNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTitleNe(appTitle string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_title != ?", appTitle))
}

// AppTitleNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppTitleNotIn(appTitle string, appTitleRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appTitle}
	for _, arg := range appTitleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_title NOT IN (?)", iArgs))
}

// AppVersionEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppVersionEq(appVersion string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_version = ?", appVersion))
}

// AppVersionIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppVersionIn(appVersion string, appVersionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appVersion}
	for _, arg := range appVersionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_version IN (?)", iArgs))
}

// AppVersionNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppVersionNe(appVersion string) CircleSetQuerySet {
	return qs.w(qs.db.Where("app_version != ?", appVersion))
}

// AppVersionNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) AppVersionNotIn(appVersion string, appVersionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{appVersion}
	for _, arg := range appVersionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("app_version NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *CircleSet) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtEq(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtGt(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtGte(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtLt(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtLte(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) CreatedAtNe(createdAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) Delete() error {
	return qs.db.Delete(CircleSet{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *CircleSet) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) DescriptionEq(description string) CircleSetQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) DescriptionIn(description string, descriptionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) DescriptionNe(description string) CircleSetQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) DescriptionNotIn(description string, descriptionRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) GetUpdater() CircleSetUpdater {
	return NewCircleSetUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDEq(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDGt(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDGte(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDIn(ID uint, IDRest ...uint) CircleSetQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDLt(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDLte(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDNe(ID uint) CircleSetQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IDNotIn(ID uint, IDRest ...uint) CircleSetQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// ImportEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) ImportEq(importValue string) CircleSetQuerySet {
	return qs.w(qs.db.Where("import = ?", importValue))
}

// ImportIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) ImportIn(importValue string, importValueRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{importValue}
	for _, arg := range importValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("import IN (?)", iArgs))
}

// ImportNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) ImportNe(importValue string) CircleSetQuerySet {
	return qs.w(qs.db.Where("import != ?", importValue))
}

// ImportNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) ImportNotIn(importValue string, importValueRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{importValue}
	for _, arg := range importValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("import NOT IN (?)", iArgs))
}

// IsEnableEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IsEnableEq(isEnable bool) CircleSetQuerySet {
	return qs.w(qs.db.Where("is_enable = ?", isEnable))
}

// IsEnableIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IsEnableIn(isEnable bool, isEnableRest ...bool) CircleSetQuerySet {
	iArgs := []interface{}{isEnable}
	for _, arg := range isEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_enable IN (?)", iArgs))
}

// IsEnableNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IsEnableNe(isEnable bool) CircleSetQuerySet {
	return qs.w(qs.db.Where("is_enable != ?", isEnable))
}

// IsEnableNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) IsEnableNotIn(isEnable bool, isEnableRest ...bool) CircleSetQuerySet {
	iArgs := []interface{}{isEnable}
	for _, arg := range isEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_enable NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) Limit(limit int) CircleSetQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) NameEq(name string) CircleSetQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) NameIn(name string, nameRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) NameNe(name string) CircleSetQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) NameNotIn(name string, nameRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs CircleSetQuerySet) One(ret *CircleSet) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderAscByCreatedAt() CircleSetQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderAscByID() CircleSetQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderAscByUpdatedAt() CircleSetQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderDescByCreatedAt() CircleSetQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderDescByID() CircleSetQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) OrderDescByUpdatedAt() CircleSetQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// RunAppEnvsEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) RunAppEnvsEq(runAppEnvs string) CircleSetQuerySet {
	return qs.w(qs.db.Where("run_app_envs = ?", runAppEnvs))
}

// RunAppEnvsIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) RunAppEnvsIn(runAppEnvs string, runAppEnvsRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{runAppEnvs}
	for _, arg := range runAppEnvsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("run_app_envs IN (?)", iArgs))
}

// RunAppEnvsNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) RunAppEnvsNe(runAppEnvs string) CircleSetQuerySet {
	return qs.w(qs.db.Where("run_app_envs != ?", runAppEnvs))
}

// RunAppEnvsNotIn is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) RunAppEnvsNotIn(runAppEnvs string, runAppEnvsRest ...string) CircleSetQuerySet {
	iArgs := []interface{}{runAppEnvs}
	for _, arg := range runAppEnvsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("run_app_envs NOT IN (?)", iArgs))
}

// SetAppContact is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppContact(appContact string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppContact)] = appContact
	return u
}

// SetAppDescription is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppDescription(appDescription string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppDescription)] = appDescription
	return u
}

// SetAppLicense is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppLicense(appLicense string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppLicense)] = appLicense
	return u
}

// SetAppSecurityDefinition is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppSecurityDefinition(appSecurityDefinition string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppSecurityDefinition)] = appSecurityDefinition
	return u
}

// SetAppTermsOfServiceUrl is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppTermsOfServiceUrl(appTermsOfServiceUrl string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppTermsOfServiceUrl)] = appTermsOfServiceUrl
	return u
}

// SetAppTitle is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppTitle(appTitle string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppTitle)] = appTitle
	return u
}

// SetAppVersion is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetAppVersion(appVersion string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.AppVersion)] = appVersion
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetCreatedAt(createdAt time.Time) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetDescription(description string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetID(ID uint) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.ID)] = ID
	return u
}

// SetImport is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetImport(importValue string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.Import)] = importValue
	return u
}

// SetIsEnable is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetIsEnable(isEnable bool) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.IsEnable)] = isEnable
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetName(name string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.Name)] = name
	return u
}

// SetRunAppEnvs is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetRunAppEnvs(runAppEnvs string) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.RunAppEnvs)] = runAppEnvs
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) SetUpdatedAt(updatedAt time.Time) CircleSetUpdater {
	u.fields[string(CircleSetDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u CircleSetUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtEq(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtGt(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtGte(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtLt(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtLte(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs CircleSetQuerySet) UpdatedAtNe(updatedAt time.Time) CircleSetQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set CircleSetQuerySet

// ===== BEGIN of CircleSet modifiers

type circleSetDBSchemaField string

func (f circleSetDBSchemaField) String() string {
	return string(f)
}

// CircleSetDBSchema stores db field names of CircleSet
var CircleSetDBSchema = struct {
	ID                    circleSetDBSchemaField
	CreatedAt             circleSetDBSchemaField
	UpdatedAt             circleSetDBSchemaField
	Name                  circleSetDBSchemaField
	Description           circleSetDBSchemaField
	Import                circleSetDBSchemaField
	IsEnable              circleSetDBSchemaField
	AppVersion            circleSetDBSchemaField
	AppTitle              circleSetDBSchemaField
	AppDescription        circleSetDBSchemaField
	AppContact            circleSetDBSchemaField
	AppTermsOfServiceUrl  circleSetDBSchemaField
	AppLicense            circleSetDBSchemaField
	AppSecurityDefinition circleSetDBSchemaField
	RunAppEnvs            circleSetDBSchemaField
}{

	ID:                    circleSetDBSchemaField("id"),
	CreatedAt:             circleSetDBSchemaField("created_at"),
	UpdatedAt:             circleSetDBSchemaField("updated_at"),
	Name:                  circleSetDBSchemaField("name"),
	Description:           circleSetDBSchemaField("description"),
	Import:                circleSetDBSchemaField("import"),
	IsEnable:              circleSetDBSchemaField("is_enable"),
	AppVersion:            circleSetDBSchemaField("app_version"),
	AppTitle:              circleSetDBSchemaField("app_title"),
	AppDescription:        circleSetDBSchemaField("app_description"),
	AppContact:            circleSetDBSchemaField("app_contact"),
	AppTermsOfServiceUrl:  circleSetDBSchemaField("app_terms_of_service_url"),
	AppLicense:            circleSetDBSchemaField("app_license"),
	AppSecurityDefinition: circleSetDBSchemaField("app_security_definition"),
	RunAppEnvs:            circleSetDBSchemaField("run_app_envs"),
}

// Update updates CircleSet fields by primary key
func (o *CircleSet) Update(db *gorm.DB, fields ...circleSetDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                       o.ID,
		"created_at":               o.CreatedAt,
		"updated_at":               o.UpdatedAt,
		"name":                     o.Name,
		"description":              o.Description,
		"import":                   o.Import,
		"is_enable":                o.IsEnable,
		"app_version":              o.AppVersion,
		"app_title":                o.AppTitle,
		"app_description":          o.AppDescription,
		"app_contact":              o.AppContact,
		"app_terms_of_service_url": o.AppTermsOfServiceUrl,
		"app_license":              o.AppLicense,
		"app_security_definition":  o.AppSecurityDefinition,
		"run_app_envs":             o.RunAppEnvs,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update CircleSet %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// CircleSetUpdater is an CircleSet updates manager
type CircleSetUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewCircleSetUpdater creates new CircleSet updater
func NewCircleSetUpdater(db *gorm.DB) CircleSetUpdater {
	return CircleSetUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&CircleSet{}),
	}
}

// ===== END of CircleSet modifiers

// ===== END of all query sets
