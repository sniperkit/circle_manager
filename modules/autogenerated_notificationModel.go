package modules

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set NotificationQuerySet

// NotificationQuerySet is an queryset type for Notification
type NotificationQuerySet struct {
	db *gorm.DB
}

// NewNotificationQuerySet constructs new NotificationQuerySet
func NewNotificationQuerySet(db *gorm.DB) NotificationQuerySet {
	return NotificationQuerySet{
		db: db.Model(&Notification{}),
	}
}

func (qs NotificationQuerySet) w(db *gorm.DB) NotificationQuerySet {
	return NewNotificationQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) All(ret *[]Notification) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Notification) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtEq(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtGt(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtGte(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtLt(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtLte(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) CreatedAtNe(createdAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Notification) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) Delete() error {
	return qs.db.Delete(Notification{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) DescriptionEq(description string) NotificationQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) DescriptionIn(description string, descriptionRest ...string) NotificationQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) DescriptionNe(description string) NotificationQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) DescriptionNotIn(description string, descriptionRest ...string) NotificationQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// EventUserIDEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDEq(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id = ?", eventUserID))
}

// EventUserIDGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDGt(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id > ?", eventUserID))
}

// EventUserIDGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDGte(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id >= ?", eventUserID))
}

// EventUserIDIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDIn(eventUserID uint, eventUserIDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{eventUserID}
	for _, arg := range eventUserIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("event_user_id IN (?)", iArgs))
}

// EventUserIDIsNotNull is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDIsNotNull() NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id IS NOT NULL"))
}

// EventUserIDIsNull is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDIsNull() NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id IS NULL"))
}

// EventUserIDLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDLt(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id < ?", eventUserID))
}

// EventUserIDLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDLte(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id <= ?", eventUserID))
}

// EventUserIDNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDNe(eventUserID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("event_user_id != ?", eventUserID))
}

// EventUserIDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) EventUserIDNotIn(eventUserID uint, eventUserIDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{eventUserID}
	for _, arg := range eventUserIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("event_user_id NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) GetUpdater() NotificationUpdater {
	return NewNotificationUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDEq(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDGt(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDGte(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDIn(ID uint, IDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDLt(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDLte(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDNe(ID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) IDNotIn(ID uint, IDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) Limit(limit int) NotificationQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MessageEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) MessageEq(message string) NotificationQuerySet {
	return qs.w(qs.db.Where("message = ?", message))
}

// MessageIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) MessageIn(message string, messageRest ...string) NotificationQuerySet {
	iArgs := []interface{}{message}
	for _, arg := range messageRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message IN (?)", iArgs))
}

// MessageNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) MessageNe(message string) NotificationQuerySet {
	return qs.w(qs.db.Where("message != ?", message))
}

// MessageNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) MessageNotIn(message string, messageRest ...string) NotificationQuerySet {
	iArgs := []interface{}{message}
	for _, arg := range messageRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message NOT IN (?)", iArgs))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NameEq(name string) NotificationQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NameIn(name string, nameRest ...string) NotificationQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NameNe(name string) NotificationQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NameNotIn(name string, nameRest ...string) NotificationQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// NotiTypeEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotiTypeEq(notiType string) NotificationQuerySet {
	return qs.w(qs.db.Where("noti_type = ?", notiType))
}

// NotiTypeIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotiTypeIn(notiType string, notiTypeRest ...string) NotificationQuerySet {
	iArgs := []interface{}{notiType}
	for _, arg := range notiTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("noti_type IN (?)", iArgs))
}

// NotiTypeNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotiTypeNe(notiType string) NotificationQuerySet {
	return qs.w(qs.db.Where("noti_type != ?", notiType))
}

// NotiTypeNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotiTypeNotIn(notiType string, notiTypeRest ...string) NotificationQuerySet {
	iArgs := []interface{}{notiType}
	for _, arg := range notiTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("noti_type NOT IN (?)", iArgs))
}

// NotificationTypeIDEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDEq(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id = ?", notificationTypeID))
}

// NotificationTypeIDGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDGt(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id > ?", notificationTypeID))
}

// NotificationTypeIDGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDGte(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id >= ?", notificationTypeID))
}

// NotificationTypeIDIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDIn(notificationTypeID uint, notificationTypeIDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{notificationTypeID}
	for _, arg := range notificationTypeIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("notification_type_id IN (?)", iArgs))
}

// NotificationTypeIDLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDLt(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id < ?", notificationTypeID))
}

// NotificationTypeIDLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDLte(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id <= ?", notificationTypeID))
}

// NotificationTypeIDNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDNe(notificationTypeID uint) NotificationQuerySet {
	return qs.w(qs.db.Where("notification_type_id != ?", notificationTypeID))
}

// NotificationTypeIDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) NotificationTypeIDNotIn(notificationTypeID uint, notificationTypeIDRest ...uint) NotificationQuerySet {
	iArgs := []interface{}{notificationTypeID}
	for _, arg := range notificationTypeIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("notification_type_id NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs NotificationQuerySet) One(ret *Notification) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscByCreatedAt() NotificationQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByEventUserID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscByEventUserID() NotificationQuerySet {
	return qs.w(qs.db.Order("event_user_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscByID() NotificationQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByNotificationTypeID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscByNotificationTypeID() NotificationQuerySet {
	return qs.w(qs.db.Order("notification_type_id ASC"))
}

// OrderAscBySentAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscBySentAt() NotificationQuerySet {
	return qs.w(qs.db.Order("sent_at ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderAscByUpdatedAt() NotificationQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescByCreatedAt() NotificationQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByEventUserID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescByEventUserID() NotificationQuerySet {
	return qs.w(qs.db.Order("event_user_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescByID() NotificationQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByNotificationTypeID is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescByNotificationTypeID() NotificationQuerySet {
	return qs.w(qs.db.Order("notification_type_id DESC"))
}

// OrderDescBySentAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescBySentAt() NotificationQuerySet {
	return qs.w(qs.db.Order("sent_at DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) OrderDescByUpdatedAt() NotificationQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadNotificationType is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) PreloadNotificationType() NotificationQuerySet {
	return qs.w(qs.db.Preload("NotificationType"))
}

// SentAtEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtEq(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at = ?", sentAt))
}

// SentAtGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtGt(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at > ?", sentAt))
}

// SentAtGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtGte(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at >= ?", sentAt))
}

// SentAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtIsNotNull() NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at IS NOT NULL"))
}

// SentAtIsNull is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtIsNull() NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at IS NULL"))
}

// SentAtLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtLt(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at < ?", sentAt))
}

// SentAtLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtLte(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at <= ?", sentAt))
}

// SentAtNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) SentAtNe(sentAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("sent_at != ?", sentAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetCreatedAt(createdAt time.Time) NotificationUpdater {
	u.fields[string(NotificationDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetDescription(description string) NotificationUpdater {
	u.fields[string(NotificationDBSchema.Description)] = description
	return u
}

// SetEventUserID is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetEventUserID(eventUserID *uint) NotificationUpdater {
	u.fields[string(NotificationDBSchema.EventUserID)] = eventUserID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetID(ID uint) NotificationUpdater {
	u.fields[string(NotificationDBSchema.ID)] = ID
	return u
}

// SetMessage is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetMessage(message string) NotificationUpdater {
	u.fields[string(NotificationDBSchema.Message)] = message
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetName(name string) NotificationUpdater {
	u.fields[string(NotificationDBSchema.Name)] = name
	return u
}

// SetNotiType is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetNotiType(notiType string) NotificationUpdater {
	u.fields[string(NotificationDBSchema.NotiType)] = notiType
	return u
}

// SetNotificationType is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetNotificationType(notificationType NotificationType) NotificationUpdater {
	u.fields[string(NotificationDBSchema.NotificationType)] = notificationType
	return u
}

// SetNotificationTypeID is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetNotificationTypeID(notificationTypeID uint) NotificationUpdater {
	u.fields[string(NotificationDBSchema.NotificationTypeID)] = notificationTypeID
	return u
}

// SetSentAt is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetSentAt(sentAt *time.Time) NotificationUpdater {
	u.fields[string(NotificationDBSchema.SentAt)] = sentAt
	return u
}

// SetTitle is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetTitle(title string) NotificationUpdater {
	u.fields[string(NotificationDBSchema.Title)] = title
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) SetUpdatedAt(updatedAt time.Time) NotificationUpdater {
	u.fields[string(NotificationDBSchema.UpdatedAt)] = updatedAt
	return u
}

// TitleEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) TitleEq(title string) NotificationQuerySet {
	return qs.w(qs.db.Where("title = ?", title))
}

// TitleIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) TitleIn(title string, titleRest ...string) NotificationQuerySet {
	iArgs := []interface{}{title}
	for _, arg := range titleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title IN (?)", iArgs))
}

// TitleNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) TitleNe(title string) NotificationQuerySet {
	return qs.w(qs.db.Where("title != ?", title))
}

// TitleNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) TitleNotIn(title string, titleRest ...string) NotificationQuerySet {
	iArgs := []interface{}{title}
	for _, arg := range titleRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u NotificationUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtEq(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtGt(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtGte(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtLt(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtLte(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs NotificationQuerySet) UpdatedAtNe(updatedAt time.Time) NotificationQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set NotificationQuerySet

// ===== BEGIN of Notification modifiers

type notificationDBSchemaField string

func (f notificationDBSchemaField) String() string {
	return string(f)
}

// NotificationDBSchema stores db field names of Notification
var NotificationDBSchema = struct {
	ID                 notificationDBSchemaField
	CreatedAt          notificationDBSchemaField
	UpdatedAt          notificationDBSchemaField
	Name               notificationDBSchemaField
	Description        notificationDBSchemaField
	EventUserID        notificationDBSchemaField
	NotificationType   notificationDBSchemaField
	NotificationTypeID notificationDBSchemaField
	NotiType           notificationDBSchemaField
	Title              notificationDBSchemaField
	Message            notificationDBSchemaField
	SentAt             notificationDBSchemaField
}{

	ID:                 notificationDBSchemaField("id"),
	CreatedAt:          notificationDBSchemaField("created_at"),
	UpdatedAt:          notificationDBSchemaField("updated_at"),
	Name:               notificationDBSchemaField("name"),
	Description:        notificationDBSchemaField("description"),
	EventUserID:        notificationDBSchemaField("event_user_id"),
	NotificationType:   notificationDBSchemaField("notification_type"),
	NotificationTypeID: notificationDBSchemaField("notification_type_id"),
	NotiType:           notificationDBSchemaField("noti_type"),
	Title:              notificationDBSchemaField("title"),
	Message:            notificationDBSchemaField("message"),
	SentAt:             notificationDBSchemaField("sent_at"),
}

// Update updates Notification fields by primary key
func (o *Notification) Update(db *gorm.DB, fields ...notificationDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                   o.ID,
		"created_at":           o.CreatedAt,
		"updated_at":           o.UpdatedAt,
		"name":                 o.Name,
		"description":          o.Description,
		"event_user_id":        o.EventUserID,
		"notification_type":    o.NotificationType,
		"notification_type_id": o.NotificationTypeID,
		"noti_type":            o.NotiType,
		"title":                o.Title,
		"message":              o.Message,
		"sent_at":              o.SentAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Notification %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// NotificationUpdater is an Notification updates manager
type NotificationUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewNotificationUpdater creates new Notification updater
func NewNotificationUpdater(db *gorm.DB) NotificationUpdater {
	return NotificationUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Notification{}),
	}
}

// ===== END of Notification modifiers

// ===== END of all query sets
