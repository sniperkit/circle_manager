// Code generated by go-queryset. DO NOT EDIT.
package modules

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set NotificationTypeQuerySet

// NotificationTypeQuerySet is an queryset type for NotificationType
type NotificationTypeQuerySet struct {
	db *gorm.DB
}

// NewNotificationTypeQuerySet constructs new NotificationTypeQuerySet
func NewNotificationTypeQuerySet(db *gorm.DB) NotificationTypeQuerySet {
	return NotificationTypeQuerySet{
		db: db.Model(&NotificationType{}),
	}
}

func (qs NotificationTypeQuerySet) w(db *gorm.DB) NotificationTypeQuerySet {
	return NewNotificationTypeQuerySet(db)
}

// ActionNameEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionNameEq(actionName string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("action_name = ?", actionName))
}

// ActionNameIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionNameIn(actionName string, actionNameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{actionName}
	for _, arg := range actionNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_name IN (?)", iArgs))
}

// ActionNameNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionNameNe(actionName string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("action_name != ?", actionName))
}

// ActionNameNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionNameNotIn(actionName string, actionNameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{actionName}
	for _, arg := range actionNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_name NOT IN (?)", iArgs))
}

// ActionTypeEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionTypeEq(actionType string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("action_type = ?", actionType))
}

// ActionTypeIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionTypeIn(actionType string, actionTypeRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{actionType}
	for _, arg := range actionTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_type IN (?)", iArgs))
}

// ActionTypeNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionTypeNe(actionType string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("action_type != ?", actionType))
}

// ActionTypeNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ActionTypeNotIn(actionType string, actionTypeRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{actionType}
	for _, arg := range actionTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_type NOT IN (?)", iArgs))
}

// All is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) All(ret *[]NotificationType) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *NotificationType) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtEq(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtGt(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtGte(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtLt(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtLte(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatedAtNe(createdAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDEq(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDGt(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDGte(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDIn(creatorID uint, creatorIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{creatorID}
	for _, arg := range creatorIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", iArgs))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDLt(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDLte(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDNe(creatorID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) CreatorIDNotIn(creatorID uint, creatorIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{creatorID}
	for _, arg := range creatorIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *NotificationType) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) Delete() error {
	return qs.db.Delete(NotificationType{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DescriptionEq(description string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DescriptionIn(description string, descriptionRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DescriptionNe(description string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DescriptionNotIn(description string, descriptionRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// DiffKeyEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffKeyEq(diffKey string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_key = ?", diffKey))
}

// DiffKeyIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffKeyIn(diffKey string, diffKeyRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffKey}
	for _, arg := range diffKeyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_key IN (?)", iArgs))
}

// DiffKeyNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffKeyNe(diffKey string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_key != ?", diffKey))
}

// DiffKeyNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffKeyNotIn(diffKey string, diffKeyRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffKey}
	for _, arg := range diffKeyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_key NOT IN (?)", iArgs))
}

// DiffModeEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffModeEq(diffMode bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_mode = ?", diffMode))
}

// DiffModeIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffModeIn(diffMode bool, diffModeRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{diffMode}
	for _, arg := range diffModeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_mode IN (?)", iArgs))
}

// DiffModeNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffModeNe(diffMode bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_mode != ?", diffMode))
}

// DiffModeNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffModeNotIn(diffMode bool, diffModeRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{diffMode}
	for _, arg := range diffModeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_mode NOT IN (?)", iArgs))
}

// DiffNewValueEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffNewValueEq(diffNewValue string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_new_value = ?", diffNewValue))
}

// DiffNewValueIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffNewValueIn(diffNewValue string, diffNewValueRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffNewValue}
	for _, arg := range diffNewValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_new_value IN (?)", iArgs))
}

// DiffNewValueNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffNewValueNe(diffNewValue string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_new_value != ?", diffNewValue))
}

// DiffNewValueNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffNewValueNotIn(diffNewValue string, diffNewValueRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffNewValue}
	for _, arg := range diffNewValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_new_value NOT IN (?)", iArgs))
}

// DiffOldValueEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffOldValueEq(diffOldValue string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_old_value = ?", diffOldValue))
}

// DiffOldValueIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffOldValueIn(diffOldValue string, diffOldValueRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffOldValue}
	for _, arg := range diffOldValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_old_value IN (?)", iArgs))
}

// DiffOldValueNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffOldValueNe(diffOldValue string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("diff_old_value != ?", diffOldValue))
}

// DiffOldValueNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) DiffOldValueNotIn(diffOldValue string, diffOldValueRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{diffOldValue}
	for _, arg := range diffOldValueRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("diff_old_value NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) GetUpdater() NotificationTypeUpdater {
	return NewNotificationTypeUpdater(qs.db)
}

// GroupEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) GroupEq(group string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("group = ?", group))
}

// GroupIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) GroupIn(group string, groupRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{group}
	for _, arg := range groupRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("group IN (?)", iArgs))
}

// GroupNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) GroupNe(group string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("group != ?", group))
}

// GroupNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) GroupNotIn(group string, groupRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{group}
	for _, arg := range groupRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("group NOT IN (?)", iArgs))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDEq(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDGt(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDGte(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDIn(ID uint, IDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDLt(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDLte(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDNe(ID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IDNotIn(ID uint, IDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// IsEnableEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsEnableEq(isEnable bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("is_enable = ?", isEnable))
}

// IsEnableIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsEnableIn(isEnable bool, isEnableRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{isEnable}
	for _, arg := range isEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_enable IN (?)", iArgs))
}

// IsEnableNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsEnableNe(isEnable bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("is_enable != ?", isEnable))
}

// IsEnableNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsEnableNotIn(isEnable bool, isEnableRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{isEnable}
	for _, arg := range isEnableRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_enable NOT IN (?)", iArgs))
}

// IsManualEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsManualEq(isManual bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("is_manual = ?", isManual))
}

// IsManualIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsManualIn(isManual bool, isManualRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{isManual}
	for _, arg := range isManualRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_manual IN (?)", iArgs))
}

// IsManualNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsManualNe(isManual bool) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("is_manual != ?", isManual))
}

// IsManualNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) IsManualNotIn(isManual bool, isManualRest ...bool) NotificationTypeQuerySet {
	iArgs := []interface{}{isManual}
	for _, arg := range isManualRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("is_manual NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) Limit(limit int) NotificationTypeQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// ListItemTemplateEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ListItemTemplateEq(listItemTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("list_item_template = ?", listItemTemplate))
}

// ListItemTemplateIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ListItemTemplateIn(listItemTemplate string, listItemTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{listItemTemplate}
	for _, arg := range listItemTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("list_item_template IN (?)", iArgs))
}

// ListItemTemplateNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ListItemTemplateNe(listItemTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("list_item_template != ?", listItemTemplate))
}

// ListItemTemplateNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ListItemTemplateNotIn(listItemTemplate string, listItemTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{listItemTemplate}
	for _, arg := range listItemTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("list_item_template NOT IN (?)", iArgs))
}

// MessageTemplateEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) MessageTemplateEq(messageTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("message_template = ?", messageTemplate))
}

// MessageTemplateIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) MessageTemplateIn(messageTemplate string, messageTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{messageTemplate}
	for _, arg := range messageTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message_template IN (?)", iArgs))
}

// MessageTemplateNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) MessageTemplateNe(messageTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("message_template != ?", messageTemplate))
}

// MessageTemplateNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) MessageTemplateNotIn(messageTemplate string, messageTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{messageTemplate}
	for _, arg := range messageTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message_template NOT IN (?)", iArgs))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) NameEq(name string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) NameIn(name string, nameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) NameNe(name string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) NameNotIn(name string, nameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs NotificationTypeQuerySet) One(ret *NotificationType) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByCreatedAt() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByCreatorID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByResourceID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByResourceID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("resource_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByUpdatedAt() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUpdaterID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderAscByUpdaterID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("updater_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByCreatedAt() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByCreatorID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByResourceID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByResourceID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("resource_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByUpdatedAt() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUpdaterID is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) OrderDescByUpdaterID() NotificationTypeQuerySet {
	return qs.w(qs.db.Order("updater_id DESC"))
}

// ReplaceTextEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ReplaceTextEq(replaceText string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("replace_text = ?", replaceText))
}

// ReplaceTextIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ReplaceTextIn(replaceText string, replaceTextRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{replaceText}
	for _, arg := range replaceTextRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("replace_text IN (?)", iArgs))
}

// ReplaceTextNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ReplaceTextNe(replaceText string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("replace_text != ?", replaceText))
}

// ReplaceTextNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ReplaceTextNotIn(replaceText string, replaceTextRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{replaceText}
	for _, arg := range replaceTextRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("replace_text NOT IN (?)", iArgs))
}

// ResourceIDEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDEq(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id = ?", resourceID))
}

// ResourceIDGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDGt(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id > ?", resourceID))
}

// ResourceIDGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDGte(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id >= ?", resourceID))
}

// ResourceIDIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDIn(resourceID uint, resourceIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{resourceID}
	for _, arg := range resourceIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_id IN (?)", iArgs))
}

// ResourceIDLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDLt(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id < ?", resourceID))
}

// ResourceIDLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDLte(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id <= ?", resourceID))
}

// ResourceIDNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDNe(resourceID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_id != ?", resourceID))
}

// ResourceIDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceIDNotIn(resourceID uint, resourceIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{resourceID}
	for _, arg := range resourceIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_id NOT IN (?)", iArgs))
}

// ResourceNameEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceNameEq(resourceName string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_name = ?", resourceName))
}

// ResourceNameIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceNameIn(resourceName string, resourceNameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{resourceName}
	for _, arg := range resourceNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_name IN (?)", iArgs))
}

// ResourceNameNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceNameNe(resourceName string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("resource_name != ?", resourceName))
}

// ResourceNameNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) ResourceNameNotIn(resourceName string, resourceNameRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{resourceName}
	for _, arg := range resourceNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_name NOT IN (?)", iArgs))
}

// SetActionName is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetActionName(actionName string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ActionName)] = actionName
	return u
}

// SetActionType is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetActionType(actionType string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ActionType)] = actionType
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetCreatedAt(createdAt time.Time) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetCreatorID(creatorID uint) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.CreatorID)] = creatorID
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetDescription(description string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.Description)] = description
	return u
}

// SetDiffKey is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetDiffKey(diffKey string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.DiffKey)] = diffKey
	return u
}

// SetDiffMode is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetDiffMode(diffMode bool) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.DiffMode)] = diffMode
	return u
}

// SetDiffNewValue is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetDiffNewValue(diffNewValue string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.DiffNewValue)] = diffNewValue
	return u
}

// SetDiffOldValue is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetDiffOldValue(diffOldValue string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.DiffOldValue)] = diffOldValue
	return u
}

// SetGroup is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetGroup(group string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.Group)] = group
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetID(ID uint) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ID)] = ID
	return u
}

// SetIsEnable is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetIsEnable(isEnable bool) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.IsEnable)] = isEnable
	return u
}

// SetIsManual is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetIsManual(isManual bool) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.IsManual)] = isManual
	return u
}

// SetListItemTemplate is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetListItemTemplate(listItemTemplate string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ListItemTemplate)] = listItemTemplate
	return u
}

// SetMessageTemplate is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetMessageTemplate(messageTemplate string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.MessageTemplate)] = messageTemplate
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetName(name string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.Name)] = name
	return u
}

// SetReplaceText is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetReplaceText(replaceText string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ReplaceText)] = replaceText
	return u
}

// SetResourceID is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetResourceID(resourceID uint) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ResourceID)] = resourceID
	return u
}

// SetResourceName is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetResourceName(resourceName string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.ResourceName)] = resourceName
	return u
}

// SetTargetWhere is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetTargetWhere(targetWhere string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.TargetWhere)] = targetWhere
	return u
}

// SetTitleTemplate is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetTitleTemplate(titleTemplate string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.TitleTemplate)] = titleTemplate
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetUpdatedAt(updatedAt time.Time) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUpdaterID is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetUpdaterID(updaterID uint) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.UpdaterID)] = updaterID
	return u
}

// SetWebhookURLs is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) SetWebhookURLs(webhookURLs string) NotificationTypeUpdater {
	u.fields[string(NotificationTypeDBSchema.WebhookURLs)] = webhookURLs
	return u
}

// TargetWhereEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TargetWhereEq(targetWhere string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("target_where = ?", targetWhere))
}

// TargetWhereIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TargetWhereIn(targetWhere string, targetWhereRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{targetWhere}
	for _, arg := range targetWhereRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("target_where IN (?)", iArgs))
}

// TargetWhereNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TargetWhereNe(targetWhere string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("target_where != ?", targetWhere))
}

// TargetWhereNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TargetWhereNotIn(targetWhere string, targetWhereRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{targetWhere}
	for _, arg := range targetWhereRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("target_where NOT IN (?)", iArgs))
}

// TitleTemplateEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TitleTemplateEq(titleTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("title_template = ?", titleTemplate))
}

// TitleTemplateIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TitleTemplateIn(titleTemplate string, titleTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{titleTemplate}
	for _, arg := range titleTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title_template IN (?)", iArgs))
}

// TitleTemplateNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TitleTemplateNe(titleTemplate string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("title_template != ?", titleTemplate))
}

// TitleTemplateNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) TitleTemplateNotIn(titleTemplate string, titleTemplateRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{titleTemplate}
	for _, arg := range titleTemplateRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("title_template NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u NotificationTypeUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtEq(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtGt(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtGte(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtLt(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtLte(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdatedAtNe(updatedAt time.Time) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UpdaterIDEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDEq(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id = ?", updaterID))
}

// UpdaterIDGt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDGt(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id > ?", updaterID))
}

// UpdaterIDGte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDGte(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id >= ?", updaterID))
}

// UpdaterIDIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDIn(updaterID uint, updaterIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{updaterID}
	for _, arg := range updaterIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("updater_id IN (?)", iArgs))
}

// UpdaterIDLt is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDLt(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id < ?", updaterID))
}

// UpdaterIDLte is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDLte(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id <= ?", updaterID))
}

// UpdaterIDNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDNe(updaterID uint) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("updater_id != ?", updaterID))
}

// UpdaterIDNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) UpdaterIDNotIn(updaterID uint, updaterIDRest ...uint) NotificationTypeQuerySet {
	iArgs := []interface{}{updaterID}
	for _, arg := range updaterIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("updater_id NOT IN (?)", iArgs))
}

// WebhookURLsEq is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) WebhookURLsEq(webhookURLs string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("webhook_urls = ?", webhookURLs))
}

// WebhookURLsIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) WebhookURLsIn(webhookURLs string, webhookURLsRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{webhookURLs}
	for _, arg := range webhookURLsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("webhook_urls IN (?)", iArgs))
}

// WebhookURLsNe is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) WebhookURLsNe(webhookURLs string) NotificationTypeQuerySet {
	return qs.w(qs.db.Where("webhook_urls != ?", webhookURLs))
}

// WebhookURLsNotIn is an autogenerated method
// nolint: dupl
func (qs NotificationTypeQuerySet) WebhookURLsNotIn(webhookURLs string, webhookURLsRest ...string) NotificationTypeQuerySet {
	iArgs := []interface{}{webhookURLs}
	for _, arg := range webhookURLsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("webhook_urls NOT IN (?)", iArgs))
}

// ===== END of query set NotificationTypeQuerySet

// ===== BEGIN of NotificationType modifiers

// NotificationTypeDBSchemaField describes database schema field. It requires for method 'Update'
type NotificationTypeDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f NotificationTypeDBSchemaField) String() string {
	return string(f)
}

// NotificationTypeDBSchema stores db field names of NotificationType
var NotificationTypeDBSchema = struct {
	ID               NotificationTypeDBSchemaField
	CreatedAt        NotificationTypeDBSchemaField
	UpdatedAt        NotificationTypeDBSchemaField
	Name             NotificationTypeDBSchemaField
	Description      NotificationTypeDBSchemaField
	CreatorID        NotificationTypeDBSchemaField
	UpdaterID        NotificationTypeDBSchemaField
	Group            NotificationTypeDBSchemaField
	IsEnable         NotificationTypeDBSchemaField
	IsManual         NotificationTypeDBSchemaField
	ActionName       NotificationTypeDBSchemaField
	ActionType       NotificationTypeDBSchemaField
	ResourceName     NotificationTypeDBSchemaField
	ResourceID       NotificationTypeDBSchemaField
	TargetWhere      NotificationTypeDBSchemaField
	TitleTemplate    NotificationTypeDBSchemaField
	MessageTemplate  NotificationTypeDBSchemaField
	ListItemTemplate NotificationTypeDBSchemaField
	WebhookURLs      NotificationTypeDBSchemaField
	ReplaceText      NotificationTypeDBSchemaField
	DiffMode         NotificationTypeDBSchemaField
	DiffKey          NotificationTypeDBSchemaField
	DiffNewValue     NotificationTypeDBSchemaField
	DiffOldValue     NotificationTypeDBSchemaField
}{

	ID:               NotificationTypeDBSchemaField("id"),
	CreatedAt:        NotificationTypeDBSchemaField("created_at"),
	UpdatedAt:        NotificationTypeDBSchemaField("updated_at"),
	Name:             NotificationTypeDBSchemaField("name"),
	Description:      NotificationTypeDBSchemaField("description"),
	CreatorID:        NotificationTypeDBSchemaField("creator_id"),
	UpdaterID:        NotificationTypeDBSchemaField("updater_id"),
	Group:            NotificationTypeDBSchemaField("group"),
	IsEnable:         NotificationTypeDBSchemaField("is_enable"),
	IsManual:         NotificationTypeDBSchemaField("is_manual"),
	ActionName:       NotificationTypeDBSchemaField("action_name"),
	ActionType:       NotificationTypeDBSchemaField("action_type"),
	ResourceName:     NotificationTypeDBSchemaField("resource_name"),
	ResourceID:       NotificationTypeDBSchemaField("resource_id"),
	TargetWhere:      NotificationTypeDBSchemaField("target_where"),
	TitleTemplate:    NotificationTypeDBSchemaField("title_template"),
	MessageTemplate:  NotificationTypeDBSchemaField("message_template"),
	ListItemTemplate: NotificationTypeDBSchemaField("list_item_template"),
	WebhookURLs:      NotificationTypeDBSchemaField("webhook_urls"),
	ReplaceText:      NotificationTypeDBSchemaField("replace_text"),
	DiffMode:         NotificationTypeDBSchemaField("diff_mode"),
	DiffKey:          NotificationTypeDBSchemaField("diff_key"),
	DiffNewValue:     NotificationTypeDBSchemaField("diff_new_value"),
	DiffOldValue:     NotificationTypeDBSchemaField("diff_old_value"),
}

// Update updates NotificationType fields by primary key
// nolint: dupl
func (o *NotificationType) Update(db *gorm.DB, fields ...NotificationTypeDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                 o.ID,
		"created_at":         o.CreatedAt,
		"updated_at":         o.UpdatedAt,
		"name":               o.Name,
		"description":        o.Description,
		"creator_id":         o.CreatorID,
		"updater_id":         o.UpdaterID,
		"group":              o.Group,
		"is_enable":          o.IsEnable,
		"is_manual":          o.IsManual,
		"action_name":        o.ActionName,
		"action_type":        o.ActionType,
		"resource_name":      o.ResourceName,
		"resource_id":        o.ResourceID,
		"target_where":       o.TargetWhere,
		"title_template":     o.TitleTemplate,
		"message_template":   o.MessageTemplate,
		"list_item_template": o.ListItemTemplate,
		"webhook_urls":       o.WebhookURLs,
		"replace_text":       o.ReplaceText,
		"diff_mode":          o.DiffMode,
		"diff_key":           o.DiffKey,
		"diff_new_value":     o.DiffNewValue,
		"diff_old_value":     o.DiffOldValue,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update NotificationType %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// NotificationTypeUpdater is an NotificationType updates manager
type NotificationTypeUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewNotificationTypeUpdater creates new NotificationType updater
// nolint: dupl
func NewNotificationTypeUpdater(db *gorm.DB) NotificationTypeUpdater {
	return NotificationTypeUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&NotificationType{}),
	}
}

// ===== END of NotificationType modifiers

// ===== END of all query sets
