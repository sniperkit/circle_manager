// Code generated by go-queryset. DO NOT EDIT.
package modules

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set CrudEventQuerySet

// CrudEventQuerySet is an queryset type for CrudEvent
type CrudEventQuerySet struct {
	db *gorm.DB
}

// NewCrudEventQuerySet constructs new CrudEventQuerySet
func NewCrudEventQuerySet(db *gorm.DB) CrudEventQuerySet {
	return CrudEventQuerySet{
		db: db.Model(&CrudEvent{}),
	}
}

func (qs CrudEventQuerySet) w(db *gorm.DB) CrudEventQuerySet {
	return NewCrudEventQuerySet(db)
}

// ActionNameEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionNameEq(actionName string) CrudEventQuerySet {
	return qs.w(qs.db.Where("action_name = ?", actionName))
}

// ActionNameIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionNameIn(actionName string, actionNameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{actionName}
	for _, arg := range actionNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_name IN (?)", iArgs))
}

// ActionNameNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionNameNe(actionName string) CrudEventQuerySet {
	return qs.w(qs.db.Where("action_name != ?", actionName))
}

// ActionNameNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionNameNotIn(actionName string, actionNameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{actionName}
	for _, arg := range actionNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_name NOT IN (?)", iArgs))
}

// ActionTypeEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionTypeEq(actionType string) CrudEventQuerySet {
	return qs.w(qs.db.Where("action_type = ?", actionType))
}

// ActionTypeIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionTypeIn(actionType string, actionTypeRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{actionType}
	for _, arg := range actionTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_type IN (?)", iArgs))
}

// ActionTypeNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionTypeNe(actionType string) CrudEventQuerySet {
	return qs.w(qs.db.Where("action_type != ?", actionType))
}

// ActionTypeNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ActionTypeNotIn(actionType string, actionTypeRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{actionType}
	for _, arg := range actionTypeRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("action_type NOT IN (?)", iArgs))
}

// All is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) All(ret *[]CrudEvent) error {
	return qs.db.Find(ret).Error
}

// CheckedNotificationEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CheckedNotificationEq(checkedNotification bool) CrudEventQuerySet {
	return qs.w(qs.db.Where("checked_notification = ?", checkedNotification))
}

// CheckedNotificationIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CheckedNotificationIn(checkedNotification bool, checkedNotificationRest ...bool) CrudEventQuerySet {
	iArgs := []interface{}{checkedNotification}
	for _, arg := range checkedNotificationRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("checked_notification IN (?)", iArgs))
}

// CheckedNotificationNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CheckedNotificationNe(checkedNotification bool) CrudEventQuerySet {
	return qs.w(qs.db.Where("checked_notification != ?", checkedNotification))
}

// CheckedNotificationNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CheckedNotificationNotIn(checkedNotification bool, checkedNotificationRest ...bool) CrudEventQuerySet {
	iArgs := []interface{}{checkedNotification}
	for _, arg := range checkedNotificationRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("checked_notification NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *CrudEvent) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtEq(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtGt(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtGte(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtLt(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtLte(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatedAtNe(createdAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CreatorIDEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDEq(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id = ?", creatorID))
}

// CreatorIDGt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDGt(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id > ?", creatorID))
}

// CreatorIDGte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDGte(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id >= ?", creatorID))
}

// CreatorIDIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDIn(creatorID uint, creatorIDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{creatorID}
	for _, arg := range creatorIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("creator_id IN (?)", iArgs))
}

// CreatorIDLt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDLt(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id < ?", creatorID))
}

// CreatorIDLte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDLte(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id <= ?", creatorID))
}

// CreatorIDNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDNe(creatorID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("creator_id != ?", creatorID))
}

// CreatorIDNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) CreatorIDNotIn(creatorID uint, creatorIDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{creatorID}
	for _, arg := range creatorIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("creator_id NOT IN (?)", iArgs))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *CrudEvent) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) Delete() error {
	return qs.db.Delete(CrudEvent{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) DescriptionEq(description string) CrudEventQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) DescriptionIn(description string, descriptionRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) DescriptionNe(description string) CrudEventQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) DescriptionNotIn(description string, descriptionRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) GetUpdater() CrudEventUpdater {
	return NewCrudEventUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDEq(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDGt(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDGte(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDIn(ID uint, IDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDLt(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDLte(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDNe(ID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) IDNotIn(ID uint, IDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) Limit(limit int) CrudEventQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) NameEq(name string) CrudEventQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) NameIn(name string, nameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) NameNe(name string) CrudEventQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) NameNotIn(name string, nameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// OldDataEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OldDataEq(oldData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("old_data = ?", oldData))
}

// OldDataIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OldDataIn(oldData string, oldDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{oldData}
	for _, arg := range oldDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("old_data IN (?)", iArgs))
}

// OldDataNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OldDataNe(oldData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("old_data != ?", oldData))
}

// OldDataNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OldDataNotIn(oldData string, oldDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{oldData}
	for _, arg := range oldDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("old_data NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs CrudEventQuerySet) One(ret *CrudEvent) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderAscByCreatedAt() CrudEventQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByCreatorID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderAscByCreatorID() CrudEventQuerySet {
	return qs.w(qs.db.Order("creator_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderAscByID() CrudEventQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByResourceID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderAscByResourceID() CrudEventQuerySet {
	return qs.w(qs.db.Order("resource_id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderAscByUpdatedAt() CrudEventQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderDescByCreatedAt() CrudEventQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByCreatorID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderDescByCreatorID() CrudEventQuerySet {
	return qs.w(qs.db.Order("creator_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderDescByID() CrudEventQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByResourceID is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderDescByResourceID() CrudEventQuerySet {
	return qs.w(qs.db.Order("resource_id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) OrderDescByUpdatedAt() CrudEventQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// RequestDataEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) RequestDataEq(requestData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("request_data = ?", requestData))
}

// RequestDataIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) RequestDataIn(requestData string, requestDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{requestData}
	for _, arg := range requestDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("request_data IN (?)", iArgs))
}

// RequestDataNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) RequestDataNe(requestData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("request_data != ?", requestData))
}

// RequestDataNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) RequestDataNotIn(requestData string, requestDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{requestData}
	for _, arg := range requestDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("request_data NOT IN (?)", iArgs))
}

// ResourceIDEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDEq(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id = ?", resourceID))
}

// ResourceIDGt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDGt(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id > ?", resourceID))
}

// ResourceIDGte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDGte(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id >= ?", resourceID))
}

// ResourceIDIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDIn(resourceID uint, resourceIDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{resourceID}
	for _, arg := range resourceIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_id IN (?)", iArgs))
}

// ResourceIDLt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDLt(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id < ?", resourceID))
}

// ResourceIDLte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDLte(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id <= ?", resourceID))
}

// ResourceIDNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDNe(resourceID uint) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_id != ?", resourceID))
}

// ResourceIDNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceIDNotIn(resourceID uint, resourceIDRest ...uint) CrudEventQuerySet {
	iArgs := []interface{}{resourceID}
	for _, arg := range resourceIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_id NOT IN (?)", iArgs))
}

// ResourceNameEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceNameEq(resourceName string) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_name = ?", resourceName))
}

// ResourceNameIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceNameIn(resourceName string, resourceNameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{resourceName}
	for _, arg := range resourceNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_name IN (?)", iArgs))
}

// ResourceNameNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceNameNe(resourceName string) CrudEventQuerySet {
	return qs.w(qs.db.Where("resource_name != ?", resourceName))
}

// ResourceNameNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResourceNameNotIn(resourceName string, resourceNameRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{resourceName}
	for _, arg := range resourceNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("resource_name NOT IN (?)", iArgs))
}

// ResponseDataEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResponseDataEq(responseData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("response_data = ?", responseData))
}

// ResponseDataIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResponseDataIn(responseData string, responseDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{responseData}
	for _, arg := range responseDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("response_data IN (?)", iArgs))
}

// ResponseDataNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResponseDataNe(responseData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("response_data != ?", responseData))
}

// ResponseDataNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) ResponseDataNotIn(responseData string, responseDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{responseData}
	for _, arg := range responseDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("response_data NOT IN (?)", iArgs))
}

// SetActionName is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetActionName(actionName string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ActionName)] = actionName
	return u
}

// SetActionType is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetActionType(actionType string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ActionType)] = actionType
	return u
}

// SetCheckedNotification is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetCheckedNotification(checkedNotification bool) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.CheckedNotification)] = checkedNotification
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetCreatedAt(createdAt time.Time) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCreatorID is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetCreatorID(creatorID uint) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.CreatorID)] = creatorID
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetDescription(description string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetID(ID uint) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetName(name string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.Name)] = name
	return u
}

// SetOldData is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetOldData(oldData string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.OldData)] = oldData
	return u
}

// SetRequestData is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetRequestData(requestData string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.RequestData)] = requestData
	return u
}

// SetResourceID is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetResourceID(resourceID uint) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ResourceID)] = resourceID
	return u
}

// SetResourceName is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetResourceName(resourceName string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ResourceName)] = resourceName
	return u
}

// SetResponseData is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetResponseData(responseData string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.ResponseData)] = responseData
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetUpdatedAt(updatedAt time.Time) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUpdatedData is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetUpdatedData(updatedData string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.UpdatedData)] = updatedData
	return u
}

// SetWhere is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) SetWhere(where string) CrudEventUpdater {
	u.fields[string(CrudEventDBSchema.Where)] = where
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u CrudEventUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtEq(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtGt(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtGte(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtLt(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtLte(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedAtNe(updatedAt time.Time) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UpdatedDataEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedDataEq(updatedData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_data = ?", updatedData))
}

// UpdatedDataIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedDataIn(updatedData string, updatedDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{updatedData}
	for _, arg := range updatedDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("updated_data IN (?)", iArgs))
}

// UpdatedDataNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedDataNe(updatedData string) CrudEventQuerySet {
	return qs.w(qs.db.Where("updated_data != ?", updatedData))
}

// UpdatedDataNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) UpdatedDataNotIn(updatedData string, updatedDataRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{updatedData}
	for _, arg := range updatedDataRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("updated_data NOT IN (?)", iArgs))
}

// WhereEq is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) WhereEq(where string) CrudEventQuerySet {
	return qs.w(qs.db.Where("where = ?", where))
}

// WhereIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) WhereIn(where string, whereRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{where}
	for _, arg := range whereRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("where IN (?)", iArgs))
}

// WhereNe is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) WhereNe(where string) CrudEventQuerySet {
	return qs.w(qs.db.Where("where != ?", where))
}

// WhereNotIn is an autogenerated method
// nolint: dupl
func (qs CrudEventQuerySet) WhereNotIn(where string, whereRest ...string) CrudEventQuerySet {
	iArgs := []interface{}{where}
	for _, arg := range whereRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("where NOT IN (?)", iArgs))
}

// ===== END of query set CrudEventQuerySet

// ===== BEGIN of CrudEvent modifiers

// CrudEventDBSchemaField describes database schema field. It requires for method 'Update'
type CrudEventDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f CrudEventDBSchemaField) String() string {
	return string(f)
}

// CrudEventDBSchema stores db field names of CrudEvent
var CrudEventDBSchema = struct {
	ID                  CrudEventDBSchemaField
	CreatedAt           CrudEventDBSchemaField
	UpdatedAt           CrudEventDBSchemaField
	Name                CrudEventDBSchemaField
	Description         CrudEventDBSchemaField
	CreatorID           CrudEventDBSchemaField
	ActionName          CrudEventDBSchemaField
	ActionType          CrudEventDBSchemaField
	ResourceName        CrudEventDBSchemaField
	ResourceID          CrudEventDBSchemaField
	Where               CrudEventDBSchemaField
	UpdatedData         CrudEventDBSchemaField
	OldData             CrudEventDBSchemaField
	RequestData         CrudEventDBSchemaField
	ResponseData        CrudEventDBSchemaField
	CheckedNotification CrudEventDBSchemaField
}{

	ID:                  CrudEventDBSchemaField("id"),
	CreatedAt:           CrudEventDBSchemaField("created_at"),
	UpdatedAt:           CrudEventDBSchemaField("updated_at"),
	Name:                CrudEventDBSchemaField("name"),
	Description:         CrudEventDBSchemaField("description"),
	CreatorID:           CrudEventDBSchemaField("creator_id"),
	ActionName:          CrudEventDBSchemaField("action_name"),
	ActionType:          CrudEventDBSchemaField("action_type"),
	ResourceName:        CrudEventDBSchemaField("resource_name"),
	ResourceID:          CrudEventDBSchemaField("resource_id"),
	Where:               CrudEventDBSchemaField("where"),
	UpdatedData:         CrudEventDBSchemaField("updated_data"),
	OldData:             CrudEventDBSchemaField("old_data"),
	RequestData:         CrudEventDBSchemaField("request_data"),
	ResponseData:        CrudEventDBSchemaField("response_data"),
	CheckedNotification: CrudEventDBSchemaField("checked_notification"),
}

// Update updates CrudEvent fields by primary key
// nolint: dupl
func (o *CrudEvent) Update(db *gorm.DB, fields ...CrudEventDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                   o.ID,
		"created_at":           o.CreatedAt,
		"updated_at":           o.UpdatedAt,
		"name":                 o.Name,
		"description":          o.Description,
		"creator_id":           o.CreatorID,
		"action_name":          o.ActionName,
		"action_type":          o.ActionType,
		"resource_name":        o.ResourceName,
		"resource_id":          o.ResourceID,
		"where":                o.Where,
		"updated_data":         o.UpdatedData,
		"old_data":             o.OldData,
		"request_data":         o.RequestData,
		"response_data":        o.ResponseData,
		"checked_notification": o.CheckedNotification,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update CrudEvent %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// CrudEventUpdater is an CrudEvent updates manager
type CrudEventUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewCrudEventUpdater creates new CrudEvent updater
// nolint: dupl
func NewCrudEventUpdater(db *gorm.DB) CrudEventUpdater {
	return CrudEventUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&CrudEvent{}),
	}
}

// ===== END of CrudEvent modifiers

// ===== END of all query sets
