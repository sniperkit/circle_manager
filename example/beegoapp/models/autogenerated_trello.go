package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TrelloQuerySet

// TrelloQuerySet is an queryset type for Trello
type TrelloQuerySet struct {
	db *gorm.DB
}

// NewTrelloQuerySet constructs new TrelloQuerySet
func NewTrelloQuerySet(db *gorm.DB) TrelloQuerySet {
	return TrelloQuerySet{
		db: db.Model(&Trello{}),
	}
}

func (qs TrelloQuerySet) w(db *gorm.DB) TrelloQuerySet {
	return NewTrelloQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) All(ret *[]Trello) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Trello) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtEq(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtGt(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtGte(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtLt(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtLte(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) CreatedAtNe(createdAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Trello) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) Delete() error {
	return qs.db.Delete(Trello{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) DescriptionEq(description string) TrelloQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) DescriptionIn(description string, descriptionRest ...string) TrelloQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) DescriptionNe(description string) TrelloQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) DescriptionNotIn(description string, descriptionRest ...string) TrelloQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) GetUpdater() TrelloUpdater {
	return NewTrelloUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDEq(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDGt(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDGte(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDIn(ID uint, IDRest ...uint) TrelloQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDLt(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDLte(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDNe(ID uint) TrelloQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) IDNotIn(ID uint, IDRest ...uint) TrelloQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// KeyEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) KeyEq(key string) TrelloQuerySet {
	return qs.w(qs.db.Where("key = ?", key))
}

// KeyIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) KeyIn(key string, keyRest ...string) TrelloQuerySet {
	iArgs := []interface{}{key}
	for _, arg := range keyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("key IN (?)", iArgs))
}

// KeyNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) KeyNe(key string) TrelloQuerySet {
	return qs.w(qs.db.Where("key != ?", key))
}

// KeyNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) KeyNotIn(key string, keyRest ...string) TrelloQuerySet {
	iArgs := []interface{}{key}
	for _, arg := range keyRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("key NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) Limit(limit int) TrelloQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) NameEq(name string) TrelloQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) NameIn(name string, nameRest ...string) TrelloQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) NameNe(name string) TrelloQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) NameNotIn(name string, nameRest ...string) TrelloQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TrelloQuerySet) One(ret *Trello) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderAscByCreatedAt() TrelloQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderAscByID() TrelloQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderAscByUpdatedAt() TrelloQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderDescByCreatedAt() TrelloQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderDescByID() TrelloQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) OrderDescByUpdatedAt() TrelloQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetCreatedAt(createdAt time.Time) TrelloUpdater {
	u.fields[string(TrelloDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetDescription(description string) TrelloUpdater {
	u.fields[string(TrelloDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetID(ID uint) TrelloUpdater {
	u.fields[string(TrelloDBSchema.ID)] = ID
	return u
}

// SetKey is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetKey(key string) TrelloUpdater {
	u.fields[string(TrelloDBSchema.Key)] = key
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetName(name string) TrelloUpdater {
	u.fields[string(TrelloDBSchema.Name)] = name
	return u
}

// SetToken is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetToken(token string) TrelloUpdater {
	u.fields[string(TrelloDBSchema.Token)] = token
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetUpdatedAt(updatedAt time.Time) TrelloUpdater {
	u.fields[string(TrelloDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserName is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) SetUserName(userName string) TrelloUpdater {
	u.fields[string(TrelloDBSchema.UserName)] = userName
	return u
}

// TokenEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) TokenEq(token string) TrelloQuerySet {
	return qs.w(qs.db.Where("token = ?", token))
}

// TokenIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) TokenIn(token string, tokenRest ...string) TrelloQuerySet {
	iArgs := []interface{}{token}
	for _, arg := range tokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("token IN (?)", iArgs))
}

// TokenNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) TokenNe(token string) TrelloQuerySet {
	return qs.w(qs.db.Where("token != ?", token))
}

// TokenNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) TokenNotIn(token string, tokenRest ...string) TrelloQuerySet {
	iArgs := []interface{}{token}
	for _, arg := range tokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("token NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TrelloUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtEq(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtGt(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtGte(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtLt(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtLte(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UpdatedAtNe(updatedAt time.Time) TrelloQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserNameEq is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UserNameEq(userName string) TrelloQuerySet {
	return qs.w(qs.db.Where("user_name = ?", userName))
}

// UserNameIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UserNameIn(userName string, userNameRest ...string) TrelloQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name IN (?)", iArgs))
}

// UserNameNe is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UserNameNe(userName string) TrelloQuerySet {
	return qs.w(qs.db.Where("user_name != ?", userName))
}

// UserNameNotIn is an autogenerated method
// nolint: dupl
func (qs TrelloQuerySet) UserNameNotIn(userName string, userNameRest ...string) TrelloQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name NOT IN (?)", iArgs))
}

// ===== END of query set TrelloQuerySet

// ===== BEGIN of Trello modifiers

type trelloDBSchemaField string

func (f trelloDBSchemaField) String() string {
	return string(f)
}

// TrelloDBSchema stores db field names of Trello
var TrelloDBSchema = struct {
	ID          trelloDBSchemaField
	CreatedAt   trelloDBSchemaField
	UpdatedAt   trelloDBSchemaField
	Name        trelloDBSchemaField
	Description trelloDBSchemaField
	UserName    trelloDBSchemaField
	Token       trelloDBSchemaField
	Key         trelloDBSchemaField
}{

	ID:          trelloDBSchemaField("id"),
	CreatedAt:   trelloDBSchemaField("created_at"),
	UpdatedAt:   trelloDBSchemaField("updated_at"),
	Name:        trelloDBSchemaField("name"),
	Description: trelloDBSchemaField("description"),
	UserName:    trelloDBSchemaField("user_name"),
	Token:       trelloDBSchemaField("token"),
	Key:         trelloDBSchemaField("key"),
}

// Update updates Trello fields by primary key
func (o *Trello) Update(db *gorm.DB, fields ...trelloDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"user_name":   o.UserName,
		"token":       o.Token,
		"key":         o.Key,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Trello %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TrelloUpdater is an Trello updates manager
type TrelloUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTrelloUpdater creates new Trello updater
func NewTrelloUpdater(db *gorm.DB) TrelloUpdater {
	return TrelloUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Trello{}),
	}
}

// ===== END of Trello modifiers

// ===== END of all query sets
