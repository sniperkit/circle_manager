package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set GithubCommitQuerySet

// GithubCommitQuerySet is an queryset type for GithubCommit
type GithubCommitQuerySet struct {
	db *gorm.DB
}

// NewGithubCommitQuerySet constructs new GithubCommitQuerySet
func NewGithubCommitQuerySet(db *gorm.DB) GithubCommitQuerySet {
	return GithubCommitQuerySet{
		db: db.Model(&GithubCommit{}),
	}
}

func (qs GithubCommitQuerySet) w(db *gorm.DB) GithubCommitQuerySet {
	return NewGithubCommitQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) All(ret *[]GithubCommit) error {
	return qs.db.Find(ret).Error
}

// BranchNameEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) BranchNameEq(branchName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("branch_name = ?", branchName))
}

// BranchNameIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) BranchNameIn(branchName string, branchNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{branchName}
	for _, arg := range branchNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("branch_name IN (?)", iArgs))
}

// BranchNameNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) BranchNameNe(branchName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("branch_name != ?", branchName))
}

// BranchNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) BranchNameNotIn(branchName string, branchNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{branchName}
	for _, arg := range branchNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("branch_name NOT IN (?)", iArgs))
}

// CommentsEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CommentsEq(comments string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("comments = ?", comments))
}

// CommentsIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CommentsIn(comments string, commentsRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{comments}
	for _, arg := range commentsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("comments IN (?)", iArgs))
}

// CommentsNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CommentsNe(comments string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("comments != ?", comments))
}

// CommentsNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CommentsNotIn(comments string, commentsRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{comments}
	for _, arg := range commentsRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("comments NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *GithubCommit) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtEq(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtGt(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtGte(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtLt(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtLte(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) CreatedAtNe(createdAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *GithubCommit) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) Delete() error {
	return qs.db.Delete(GithubCommit{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) DescriptionEq(description string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) DescriptionIn(description string, descriptionRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) DescriptionNe(description string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) DescriptionNotIn(description string, descriptionRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) GetUpdater() GithubCommitUpdater {
	return NewGithubCommitUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDEq(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDGt(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDGte(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDIn(ID uint, IDRest ...uint) GithubCommitQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDLt(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDLte(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDNe(ID uint) GithubCommitQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) IDNotIn(ID uint, IDRest ...uint) GithubCommitQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) Limit(limit int) GithubCommitQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) NameEq(name string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) NameIn(name string, nameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) NameNe(name string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) NameNotIn(name string, nameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs GithubCommitQuerySet) One(ret *GithubCommit) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderAscByCreatedAt() GithubCommitQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderAscByID() GithubCommitQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderAscByUpdatedAt() GithubCommitQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderDescByCreatedAt() GithubCommitQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderDescByID() GithubCommitQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) OrderDescByUpdatedAt() GithubCommitQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// RepoNameEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) RepoNameEq(repoName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("repo_name = ?", repoName))
}

// RepoNameIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) RepoNameIn(repoName string, repoNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{repoName}
	for _, arg := range repoNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("repo_name IN (?)", iArgs))
}

// RepoNameNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) RepoNameNe(repoName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("repo_name != ?", repoName))
}

// RepoNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) RepoNameNotIn(repoName string, repoNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{repoName}
	for _, arg := range repoNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("repo_name NOT IN (?)", iArgs))
}

// SetBranchName is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetBranchName(branchName string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.BranchName)] = branchName
	return u
}

// SetComments is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetComments(comments string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.Comments)] = comments
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetCreatedAt(createdAt time.Time) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetDescription(description string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetID(ID uint) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetName(name string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.Name)] = name
	return u
}

// SetRepoName is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetRepoName(repoName string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.RepoName)] = repoName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetUpdatedAt(updatedAt time.Time) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserName is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) SetUserName(userName string) GithubCommitUpdater {
	u.fields[string(GithubCommitDBSchema.UserName)] = userName
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u GithubCommitUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtEq(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtGt(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtGte(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtLt(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtLte(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UpdatedAtNe(updatedAt time.Time) GithubCommitQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserNameEq is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UserNameEq(userName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("user_name = ?", userName))
}

// UserNameIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UserNameIn(userName string, userNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name IN (?)", iArgs))
}

// UserNameNe is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UserNameNe(userName string) GithubCommitQuerySet {
	return qs.w(qs.db.Where("user_name != ?", userName))
}

// UserNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubCommitQuerySet) UserNameNotIn(userName string, userNameRest ...string) GithubCommitQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name NOT IN (?)", iArgs))
}

// ===== END of query set GithubCommitQuerySet

// ===== BEGIN of GithubCommit modifiers

type githubCommitDBSchemaField string

func (f githubCommitDBSchemaField) String() string {
	return string(f)
}

// GithubCommitDBSchema stores db field names of GithubCommit
var GithubCommitDBSchema = struct {
	ID          githubCommitDBSchemaField
	CreatedAt   githubCommitDBSchemaField
	UpdatedAt   githubCommitDBSchemaField
	Name        githubCommitDBSchemaField
	Description githubCommitDBSchemaField
	RepoName    githubCommitDBSchemaField
	Comments    githubCommitDBSchemaField
	UserName    githubCommitDBSchemaField
	BranchName  githubCommitDBSchemaField
}{

	ID:          githubCommitDBSchemaField("id"),
	CreatedAt:   githubCommitDBSchemaField("created_at"),
	UpdatedAt:   githubCommitDBSchemaField("updated_at"),
	Name:        githubCommitDBSchemaField("name"),
	Description: githubCommitDBSchemaField("description"),
	RepoName:    githubCommitDBSchemaField("repo_name"),
	Comments:    githubCommitDBSchemaField("comments"),
	UserName:    githubCommitDBSchemaField("user_name"),
	BranchName:  githubCommitDBSchemaField("branch_name"),
}

// Update updates GithubCommit fields by primary key
func (o *GithubCommit) Update(db *gorm.DB, fields ...githubCommitDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"repo_name":   o.RepoName,
		"comments":    o.Comments,
		"user_name":   o.UserName,
		"branch_name": o.BranchName,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update GithubCommit %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// GithubCommitUpdater is an GithubCommit updates manager
type GithubCommitUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewGithubCommitUpdater creates new GithubCommit updater
func NewGithubCommitUpdater(db *gorm.DB) GithubCommitUpdater {
	return GithubCommitUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&GithubCommit{}),
	}
}

// ===== END of GithubCommit modifiers

// ===== END of all query sets
