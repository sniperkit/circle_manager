package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set KeyEventQuerySet

// KeyEventQuerySet is an queryset type for KeyEvent
type KeyEventQuerySet struct {
	db *gorm.DB
}

// NewKeyEventQuerySet constructs new KeyEventQuerySet
func NewKeyEventQuerySet(db *gorm.DB) KeyEventQuerySet {
	return KeyEventQuerySet{
		db: db.Model(&KeyEvent{}),
	}
}

func (qs KeyEventQuerySet) w(db *gorm.DB) KeyEventQuerySet {
	return NewKeyEventQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) All(ret *[]KeyEvent) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *KeyEvent) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtEq(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtGt(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtGte(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtLt(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtLte(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) CreatedAtNe(createdAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *KeyEvent) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) Delete() error {
	return qs.db.Delete(KeyEvent{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) DescriptionEq(description string) KeyEventQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) DescriptionIn(description string, descriptionRest ...string) KeyEventQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) DescriptionNe(description string) KeyEventQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) DescriptionNotIn(description string, descriptionRest ...string) KeyEventQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// EventDateEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateEq(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date = ?", eventDate))
}

// EventDateGt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateGt(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date > ?", eventDate))
}

// EventDateGte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateGte(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date >= ?", eventDate))
}

// EventDateLt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateLt(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date < ?", eventDate))
}

// EventDateLte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateLte(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date <= ?", eventDate))
}

// EventDateNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) EventDateNe(eventDate time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("event_date != ?", eventDate))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) GetUpdater() KeyEventUpdater {
	return NewKeyEventUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDEq(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDGt(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDGte(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDIn(ID uint, IDRest ...uint) KeyEventQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDLt(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDLte(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDNe(ID uint) KeyEventQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) IDNotIn(ID uint, IDRest ...uint) KeyEventQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) Limit(limit int) KeyEventQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) NameEq(name string) KeyEventQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) NameIn(name string, nameRest ...string) KeyEventQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) NameNe(name string) KeyEventQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) NameNotIn(name string, nameRest ...string) KeyEventQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs KeyEventQuerySet) One(ret *KeyEvent) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderAscByCreatedAt() KeyEventQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByEventDate is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderAscByEventDate() KeyEventQuerySet {
	return qs.w(qs.db.Order("event_date ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderAscByID() KeyEventQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderAscByUpdatedAt() KeyEventQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderDescByCreatedAt() KeyEventQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByEventDate is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderDescByEventDate() KeyEventQuerySet {
	return qs.w(qs.db.Order("event_date DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderDescByID() KeyEventQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) OrderDescByUpdatedAt() KeyEventQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetCreatedAt(createdAt time.Time) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetDescription(description string) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.Description)] = description
	return u
}

// SetEventDate is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetEventDate(eventDate time.Time) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.EventDate)] = eventDate
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetID(ID uint) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetName(name string) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.Name)] = name
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) SetUpdatedAt(updatedAt time.Time) KeyEventUpdater {
	u.fields[string(KeyEventDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u KeyEventUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtEq(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtGt(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtGte(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtLt(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtLte(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs KeyEventQuerySet) UpdatedAtNe(updatedAt time.Time) KeyEventQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set KeyEventQuerySet

// ===== BEGIN of KeyEvent modifiers

type keyEventDBSchemaField string

func (f keyEventDBSchemaField) String() string {
	return string(f)
}

// KeyEventDBSchema stores db field names of KeyEvent
var KeyEventDBSchema = struct {
	ID          keyEventDBSchemaField
	CreatedAt   keyEventDBSchemaField
	UpdatedAt   keyEventDBSchemaField
	Name        keyEventDBSchemaField
	Description keyEventDBSchemaField
	EventDate   keyEventDBSchemaField
}{

	ID:          keyEventDBSchemaField("id"),
	CreatedAt:   keyEventDBSchemaField("created_at"),
	UpdatedAt:   keyEventDBSchemaField("updated_at"),
	Name:        keyEventDBSchemaField("name"),
	Description: keyEventDBSchemaField("description"),
	EventDate:   keyEventDBSchemaField("event_date"),
}

// Update updates KeyEvent fields by primary key
func (o *KeyEvent) Update(db *gorm.DB, fields ...keyEventDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"event_date":  o.EventDate,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update KeyEvent %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// KeyEventUpdater is an KeyEvent updates manager
type KeyEventUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewKeyEventUpdater creates new KeyEvent updater
func NewKeyEventUpdater(db *gorm.DB) KeyEventUpdater {
	return KeyEventUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&KeyEvent{}),
	}
}

// ===== END of KeyEvent modifiers

// ===== END of all query sets
