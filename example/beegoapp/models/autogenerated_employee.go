package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set EmployeeQuerySet

// EmployeeQuerySet is an queryset type for Employee
type EmployeeQuerySet struct {
	db *gorm.DB
}

// NewEmployeeQuerySet constructs new EmployeeQuerySet
func NewEmployeeQuerySet(db *gorm.DB) EmployeeQuerySet {
	return EmployeeQuerySet{
		db: db.Model(&Employee{}),
	}
}

func (qs EmployeeQuerySet) w(db *gorm.DB) EmployeeQuerySet {
	return NewEmployeeQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) All(ret *[]Employee) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Employee) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtEq(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtGt(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtGte(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtLt(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtLte(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) CreatedAtNe(createdAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) Delete() error {
	return qs.db.Delete(Employee{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Employee) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) DescriptionEq(description string) EmployeeQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) DescriptionIn(description string, descriptionRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) DescriptionNe(description string) EmployeeQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) DescriptionNotIn(description string, descriptionRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) GetUpdater() EmployeeUpdater {
	return NewEmployeeUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDEq(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDGt(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDGte(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDIn(ID uint, IDRest ...uint) EmployeeQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDLt(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDLte(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDNe(ID uint) EmployeeQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) IDNotIn(ID uint, IDRest ...uint) EmployeeQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) Limit(limit int) EmployeeQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) NameEq(name string) EmployeeQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) NameIn(name string, nameRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) NameNe(name string) EmployeeQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) NameNotIn(name string, nameRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs EmployeeQuerySet) One(ret *Employee) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderAscByCreatedAt() EmployeeQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderAscByID() EmployeeQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderAscByUpdatedAt() EmployeeQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderDescByCreatedAt() EmployeeQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderDescByID() EmployeeQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OrderDescByUpdatedAt() EmployeeQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OriginNameEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OriginNameEq(originName string) EmployeeQuerySet {
	return qs.w(qs.db.Where("origin_name = ?", originName))
}

// OriginNameIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OriginNameIn(originName string, originNameRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{originName}
	for _, arg := range originNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("origin_name IN (?)", iArgs))
}

// OriginNameNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OriginNameNe(originName string) EmployeeQuerySet {
	return qs.w(qs.db.Where("origin_name != ?", originName))
}

// OriginNameNotIn is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) OriginNameNotIn(originName string, originNameRest ...string) EmployeeQuerySet {
	iArgs := []interface{}{originName}
	for _, arg := range originNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("origin_name NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetCreatedAt(createdAt time.Time) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetDescription(description string) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetID(ID uint) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetName(name string) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.Name)] = name
	return u
}

// SetOriginName is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetOriginName(originName string) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.OriginName)] = originName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) SetUpdatedAt(updatedAt time.Time) EmployeeUpdater {
	u.fields[string(EmployeeDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u EmployeeUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtEq(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtGt(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtGte(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtLt(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtLte(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs EmployeeQuerySet) UpdatedAtNe(updatedAt time.Time) EmployeeQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set EmployeeQuerySet

// ===== BEGIN of Employee modifiers

type employeeDBSchemaField string

func (f employeeDBSchemaField) String() string {
	return string(f)
}

// EmployeeDBSchema stores db field names of Employee
var EmployeeDBSchema = struct {
	ID          employeeDBSchemaField
	CreatedAt   employeeDBSchemaField
	UpdatedAt   employeeDBSchemaField
	Name        employeeDBSchemaField
	Description employeeDBSchemaField
	OriginName  employeeDBSchemaField
}{

	ID:          employeeDBSchemaField("id"),
	CreatedAt:   employeeDBSchemaField("created_at"),
	UpdatedAt:   employeeDBSchemaField("updated_at"),
	Name:        employeeDBSchemaField("name"),
	Description: employeeDBSchemaField("description"),
	OriginName:  employeeDBSchemaField("origin_name"),
}

// Update updates Employee fields by primary key
func (o *Employee) Update(db *gorm.DB, fields ...employeeDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"origin_name": o.OriginName,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Employee %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// EmployeeUpdater is an Employee updates manager
type EmployeeUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewEmployeeUpdater creates new Employee updater
func NewEmployeeUpdater(db *gorm.DB) EmployeeUpdater {
	return EmployeeUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Employee{}),
	}
}

// ===== END of Employee modifiers

// ===== END of all query sets
