package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ProjectQuerySet

// ProjectQuerySet is an queryset type for Project
type ProjectQuerySet struct {
	db *gorm.DB
}

// NewProjectQuerySet constructs new ProjectQuerySet
func NewProjectQuerySet(db *gorm.DB) ProjectQuerySet {
	return ProjectQuerySet{
		db: db.Model(&Project{}),
	}
}

func (qs ProjectQuerySet) w(db *gorm.DB) ProjectQuerySet {
	return NewProjectQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) All(ret *[]Project) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Project) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtEq(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtGt(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtGte(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtLt(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtLte(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) CreatedAtNe(createdAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Delete() error {
	return qs.db.Delete(Project{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Project) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionEq(description string) ProjectQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionIn(description string, descriptionRest ...string) ProjectQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionNe(description string) ProjectQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) DescriptionNotIn(description string, descriptionRest ...string) ProjectQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) GetUpdater() ProjectUpdater {
	return NewProjectUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDEq(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDGt(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDGte(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDIn(ID uint, IDRest ...uint) ProjectQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDLt(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDLte(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDNe(ID uint) ProjectQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) IDNotIn(ID uint, IDRest ...uint) ProjectQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) Limit(limit int) ProjectQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameEq(name string) ProjectQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameIn(name string, nameRest ...string) ProjectQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameNe(name string) ProjectQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) NameNotIn(name string, nameRest ...string) ProjectQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ProjectQuerySet) One(ret *Project) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByCreatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByID() ProjectQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderAscByUpdatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByCreatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByID() ProjectQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) OrderDescByUpdatedAt() ProjectQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetCreatedAt(createdAt time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetDescription(description string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetID(ID uint) ProjectUpdater {
	u.fields[string(ProjectDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetName(name string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Name)] = name
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetStatus(status string) ProjectUpdater {
	u.fields[string(ProjectDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) SetUpdatedAt(updatedAt time.Time) ProjectUpdater {
	u.fields[string(ProjectDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) StatusEq(status string) ProjectQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) StatusIn(status string, statusRest ...string) ProjectQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status IN (?)", iArgs))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) StatusNe(status string) ProjectQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) StatusNotIn(status string, statusRest ...string) ProjectQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ProjectUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtEq(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtGt(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtGte(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtLt(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtLte(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ProjectQuerySet) UpdatedAtNe(updatedAt time.Time) ProjectQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set ProjectQuerySet

// ===== BEGIN of Project modifiers

type projectDBSchemaField string

func (f projectDBSchemaField) String() string {
	return string(f)
}

// ProjectDBSchema stores db field names of Project
var ProjectDBSchema = struct {
	ID          projectDBSchemaField
	CreatedAt   projectDBSchemaField
	UpdatedAt   projectDBSchemaField
	Name        projectDBSchemaField
	Description projectDBSchemaField
	Status      projectDBSchemaField
}{

	ID:          projectDBSchemaField("id"),
	CreatedAt:   projectDBSchemaField("created_at"),
	UpdatedAt:   projectDBSchemaField("updated_at"),
	Name:        projectDBSchemaField("name"),
	Description: projectDBSchemaField("description"),
	Status:      projectDBSchemaField("status"),
}

// Update updates Project fields by primary key
func (o *Project) Update(db *gorm.DB, fields ...projectDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"status":      o.Status,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Project %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ProjectUpdater is an Project updates manager
type ProjectUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewProjectUpdater creates new Project updater
func NewProjectUpdater(db *gorm.DB) ProjectUpdater {
	return ProjectUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Project{}),
	}
}

// ===== END of Project modifiers

// ===== END of all query sets
