package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set GithubReleaseQuerySet

// GithubReleaseQuerySet is an queryset type for GithubRelease
type GithubReleaseQuerySet struct {
	db *gorm.DB
}

// NewGithubReleaseQuerySet constructs new GithubReleaseQuerySet
func NewGithubReleaseQuerySet(db *gorm.DB) GithubReleaseQuerySet {
	return GithubReleaseQuerySet{
		db: db.Model(&GithubRelease{}),
	}
}

func (qs GithubReleaseQuerySet) w(db *gorm.DB) GithubReleaseQuerySet {
	return NewGithubReleaseQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) All(ret *[]GithubRelease) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *GithubRelease) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtEq(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtGt(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtGte(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtLt(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtLte(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) CreatedAtNe(createdAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *GithubRelease) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) Delete() error {
	return qs.db.Delete(GithubRelease{}).Error
}

// DescriptionEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) DescriptionEq(description string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("description = ?", description))
}

// DescriptionIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) DescriptionIn(description string, descriptionRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description IN (?)", iArgs))
}

// DescriptionNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) DescriptionNe(description string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("description != ?", description))
}

// DescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) DescriptionNotIn(description string, descriptionRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{description}
	for _, arg := range descriptionRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("description NOT IN (?)", iArgs))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) GetUpdater() GithubReleaseUpdater {
	return NewGithubReleaseUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDEq(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDGt(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDGte(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDIn(ID uint, IDRest ...uint) GithubReleaseQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDLt(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDLte(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDNe(ID uint) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) IDNotIn(ID uint, IDRest ...uint) GithubReleaseQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) Limit(limit int) GithubReleaseQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MessageEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) MessageEq(message string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("message = ?", message))
}

// MessageIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) MessageIn(message string, messageRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{message}
	for _, arg := range messageRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message IN (?)", iArgs))
}

// MessageNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) MessageNe(message string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("message != ?", message))
}

// MessageNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) MessageNotIn(message string, messageRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{message}
	for _, arg := range messageRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("message NOT IN (?)", iArgs))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) NameEq(name string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) NameIn(name string, nameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) NameNe(name string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) NameNotIn(name string, nameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs GithubReleaseQuerySet) One(ret *GithubRelease) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderAscByCreatedAt() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderAscByID() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderAscByUpdatedAt() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderDescByCreatedAt() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderDescByID() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) OrderDescByUpdatedAt() GithubReleaseQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreReleaseEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) PreReleaseEq(preRelease bool) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("pre_release = ?", preRelease))
}

// PreReleaseIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) PreReleaseIn(preRelease bool, preReleaseRest ...bool) GithubReleaseQuerySet {
	iArgs := []interface{}{preRelease}
	for _, arg := range preReleaseRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("pre_release IN (?)", iArgs))
}

// PreReleaseNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) PreReleaseNe(preRelease bool) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("pre_release != ?", preRelease))
}

// PreReleaseNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) PreReleaseNotIn(preRelease bool, preReleaseRest ...bool) GithubReleaseQuerySet {
	iArgs := []interface{}{preRelease}
	for _, arg := range preReleaseRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("pre_release NOT IN (?)", iArgs))
}

// RepoNameEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) RepoNameEq(repoName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("repo_name = ?", repoName))
}

// RepoNameIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) RepoNameIn(repoName string, repoNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{repoName}
	for _, arg := range repoNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("repo_name IN (?)", iArgs))
}

// RepoNameNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) RepoNameNe(repoName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("repo_name != ?", repoName))
}

// RepoNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) RepoNameNotIn(repoName string, repoNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{repoName}
	for _, arg := range repoNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("repo_name NOT IN (?)", iArgs))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetCreatedAt(createdAt time.Time) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDescription is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetDescription(description string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.Description)] = description
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetID(ID uint) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.ID)] = ID
	return u
}

// SetMessage is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetMessage(message string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.Message)] = message
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetName(name string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.Name)] = name
	return u
}

// SetPreRelease is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetPreRelease(preRelease bool) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.PreRelease)] = preRelease
	return u
}

// SetRepoName is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetRepoName(repoName string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.RepoName)] = repoName
	return u
}

// SetTagName is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetTagName(tagName string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.TagName)] = tagName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetUpdatedAt(updatedAt time.Time) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserName is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) SetUserName(userName string) GithubReleaseUpdater {
	u.fields[string(GithubReleaseDBSchema.UserName)] = userName
	return u
}

// TagNameEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) TagNameEq(tagName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("tag_name = ?", tagName))
}

// TagNameIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) TagNameIn(tagName string, tagNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{tagName}
	for _, arg := range tagNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("tag_name IN (?)", iArgs))
}

// TagNameNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) TagNameNe(tagName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("tag_name != ?", tagName))
}

// TagNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) TagNameNotIn(tagName string, tagNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{tagName}
	for _, arg := range tagNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("tag_name NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u GithubReleaseUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtEq(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtGt(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtGte(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtLt(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtLte(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UpdatedAtNe(updatedAt time.Time) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserNameEq is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UserNameEq(userName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("user_name = ?", userName))
}

// UserNameIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UserNameIn(userName string, userNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name IN (?)", iArgs))
}

// UserNameNe is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UserNameNe(userName string) GithubReleaseQuerySet {
	return qs.w(qs.db.Where("user_name != ?", userName))
}

// UserNameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubReleaseQuerySet) UserNameNotIn(userName string, userNameRest ...string) GithubReleaseQuerySet {
	iArgs := []interface{}{userName}
	for _, arg := range userNameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_name NOT IN (?)", iArgs))
}

// ===== END of query set GithubReleaseQuerySet

// ===== BEGIN of GithubRelease modifiers

type githubReleaseDBSchemaField string

func (f githubReleaseDBSchemaField) String() string {
	return string(f)
}

// GithubReleaseDBSchema stores db field names of GithubRelease
var GithubReleaseDBSchema = struct {
	ID          githubReleaseDBSchemaField
	CreatedAt   githubReleaseDBSchemaField
	UpdatedAt   githubReleaseDBSchemaField
	Name        githubReleaseDBSchemaField
	Description githubReleaseDBSchemaField
	RepoName    githubReleaseDBSchemaField
	TagName     githubReleaseDBSchemaField
	UserName    githubReleaseDBSchemaField
	PreRelease  githubReleaseDBSchemaField
	Message     githubReleaseDBSchemaField
}{

	ID:          githubReleaseDBSchemaField("id"),
	CreatedAt:   githubReleaseDBSchemaField("created_at"),
	UpdatedAt:   githubReleaseDBSchemaField("updated_at"),
	Name:        githubReleaseDBSchemaField("name"),
	Description: githubReleaseDBSchemaField("description"),
	RepoName:    githubReleaseDBSchemaField("repo_name"),
	TagName:     githubReleaseDBSchemaField("tag_name"),
	UserName:    githubReleaseDBSchemaField("user_name"),
	PreRelease:  githubReleaseDBSchemaField("pre_release"),
	Message:     githubReleaseDBSchemaField("message"),
}

// Update updates GithubRelease fields by primary key
func (o *GithubRelease) Update(db *gorm.DB, fields ...githubReleaseDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":          o.ID,
		"created_at":  o.CreatedAt,
		"updated_at":  o.UpdatedAt,
		"name":        o.Name,
		"description": o.Description,
		"repo_name":   o.RepoName,
		"tag_name":    o.TagName,
		"user_name":   o.UserName,
		"pre_release": o.PreRelease,
		"message":     o.Message,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update GithubRelease %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// GithubReleaseUpdater is an GithubRelease updates manager
type GithubReleaseUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewGithubReleaseUpdater creates new GithubRelease updater
func NewGithubReleaseUpdater(db *gorm.DB) GithubReleaseUpdater {
	return GithubReleaseUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&GithubRelease{}),
	}
}

// ===== END of GithubRelease modifiers

// ===== END of all query sets
